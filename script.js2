// const jumpAction = () => {
//     img.src = 'images/Bird-2.png';
//     bird_dy = -7.6;
//   };
  
//   const QuestionList = [
//     { 'Q1': "What is Your Name" },
//     { 'Q2': "What is Your School Name" },
//     { 'Q3': "What is Your father Name" },
//     { 'Q4': "What is Your Mother Name" },
//     { 'Q5': "What is Your Brother Name" },
//     { 'Q6': "Where are you From" },
//     { 'Q7': "What is going on?" },
//     { 'Q8': "Had a Dinner?" },
//     { 'Q9': "why 1+1 is equal to 2?" },
//     {'Q10': "Explain Newtons law of motion?"}
//   ];
  
//   let currentQuestionIndex = 0;
//   let isGamePaused = false;
//   let bird_dy = 0;
//     const terminalVelocity = 2;
//     let pipe_seperation = 0;
//     let pipe_gap = 35;
  
  
  
//   function displayQuestion() {
//     if (currentQuestionIndex < QuestionList.length) {
//       const currentQuestion = QuestionList[currentQuestionIndex];
//       displayQuestionInModal(Object.values(currentQuestion)[0]);
//       currentQuestionIndex++;
//     } else {
//       currentQuestionIndex = 0;
//       onGameOver();
//     }
//   }
  
  
  
  
//   function displayQuestionInModal(question) {
//     pauseGame(); // Pause the game before displaying the question modal
//     $('#questionText').text(question);
  
//     // Show the modal
//     $('#questionModal').modal('show');
//   }
  
  
  
  
  
  
//   // Rest of your code...
  
//   function pauseGame() {
//     isGamePaused = true;
//     message.classList.add('pausedMessage');
    
//     // Remove event listeners for vertical movement
//     document.removeEventListener('touchstart', jumpAction);
//     document.removeEventListener('keydown', jumpAction);
//   }
  
//   function resumeGame() {
//     isGamePaused = false;
//     document.getElementById("bird-1").style.display ='block';
//     $('#questionModal').modal('hide'); // Close the modal
    
//     // Re-add event listeners for vertical movement
//     document.addEventListener('touchstart', jumpAction);
//     document.addEventListener('keydown', jumpAction);
    
//     // Resume the animations and game logic here
//     move();
//     requestAnimationFrame(apply_gravity);
//     requestAnimationFrame(create_pipe);
//   }
  
  
  
//   function togglePauseResume() {
//     if (isGamePaused) {
//       resumeGame();
//     } else {
//       pauseGame();
//     }
//   }
  
//   document.addEventListener('keydown', (e) => {
//     if (e.key === ' ' && game_state === 'Play') {
//       togglePauseResume();
//     }
//   });
  
//   document.addEventListener('touchstart', (e) => {
//     if (game_state === 'Play') {
//       togglePauseResume();
//     }
//   });
  
//   document.addEventListener('keydown', (e) => {
//     if (e.key === ' ') { // Spacebar key
//       togglePauseResume();
//     }
//   });
  
//   document.addEventListener('touchstart', (e) => {
//     togglePauseResume();
//   });



// let move_speed = 3, grativy = 0.5;
// let bird = document.querySelector('.bird');
// let img = document.getElementById('bird-1');
// let sound_point = new Audio('sounds effect/point.mp3');
// let sound_die = new Audio('sounds effect/die.mp3');

// // getting bird element properties
// let bird_props = bird.getBoundingClientRect();

// // This method returns DOMReact -> top, right, bottom, left, x, y, width and height
// let background = document.querySelector('.background').getBoundingClientRect();

// let score_val = document.querySelector('.score_val');
// let message = document.querySelector('.message');
// let score_title = document.querySelector('.score_title');

// let game_state = 'Start';
// img.style.display = 'none';
// message.classList.add('messageStyle');

// document.addEventListener('keydown', (e) => {
    
//     if(e.key == 'Enter' && game_state != 'Play'){
//         document.querySelectorAll('.pipe_sprite').forEach((e) => {
//             e.remove();
//         });
//         img.style.display = 'block';
//         bird.style.top = '40vh';
//         game_state = 'Play';
//         message.innerHTML = '';
//         score_title.innerHTML = 'Score : ';
//         score_val.innerHTML = '0';
//         message.classList.remove('messageStyle');
//         play();
//     }
// });


// function move(){
//     if(game_state != 'Play') return;

//     let pipe_sprite = document.querySelectorAll('.pipe_sprite');
//     pipe_sprite.forEach((element) => {
//         let pipe_sprite_props = element.getBoundingClientRect();
//         bird_props = bird.getBoundingClientRect();

//         if(pipe_sprite_props.right <= 0){
//             element.remove();
//         }else{
//             if(bird_props.left < pipe_sprite_props.left + pipe_sprite_props.width && bird_props.left + bird_props.width > pipe_sprite_props.left && bird_props.top < pipe_sprite_props.top + pipe_sprite_props.height && bird_props.top + bird_props.height > pipe_sprite_props.top){
//                 game_state = 'End';
//                 message.innerHTML = 'Game Over'.fontcolor('red') + '<br>Press Enter To Restart';
//                 message.classList.add('messageStyle');
//                 img.style.display = 'none';
//                 sound_die.play();
//                 return;
//             }else{
//                 if(pipe_sprite_props.right < bird_props.left && pipe_sprite_props.right + move_speed >= bird_props.left && element.increase_score == '1'){
//                     score_val.innerHTML =+ score_val.innerHTML + 1;
//                     sound_point.play();
//                 }
//                 element.style.left = pipe_sprite_props.left - move_speed + 'px';
//             }
//         }
//     });
//     requestAnimationFrame(move);
// }


// function apply_gravity() {
//     if (game_state !== 'Play') return;

//     bird_dy = Math.min(bird_dy + grativy, terminalVelocity);

//     // Function to handle jump action (change image and set upward velocity)
//     const jumpAction = () => {
//         img.src = 'images/Bird-2.png';
//         bird_dy = -7.6; // Set the upward velocity when the bird jumps
//     };

//     // Update bird image and velocity when touch start is detected
//     document.addEventListener('touchstart', jumpAction);

//     // Update bird image and velocity when arrow up key is pressed
//     document.addEventListener('keydown', (e) => {
//         if (e.key === 'ArrowUp' || e.key === ' ') {
//             jumpAction();
//         }
//     });

//     // Reset bird image when touch end is detected
//     document.addEventListener('touchend', (e) => {
//         img.src = 'images/Bird.png';
//     });

//     // Reset bird image when arrow up key is released
//     document.addEventListener('keyup', (e) => {
//         if (e.key === 'ArrowUp' || e.key === ' ') {
//             img.src = 'images/Bird.png';
//         }
//     });

//     // Check if the bird is touching the top or bottom of the screen
//     if (bird_props.top <= 0 || bird_props.bottom >= background.bottom) {
//         // Game over condition
//         game_state = 'End';
//         message.style.left = '28vw';
//         window.location.reload();
//         message.classList.remove('messageStyle');
//         return;
//     }

//     // Move the bird vertically based on its velocity
//     bird.style.top = bird_props.top + bird_dy + 'px';
//     bird_props = bird.getBoundingClientRect();

//     // Call apply_gravity function recursively using requestAnimationFrame
//     requestAnimationFrame(apply_gravity);
// }

// function create_pipe(){
//     if(game_state != 'Play') return;

//     if(pipe_seperation > 215){
//         pipe_seperation = 0;

//         let pipe_posi = Math.floor(Math.random() * 43) + 8;
//         let pipe_sprite_inv = document.createElement('div');
//         pipe_sprite_inv.className = 'pipe_sprite';
//         pipe_sprite_inv.style.top = pipe_posi - 70 + 'vh';
//         pipe_sprite_inv.style.left = '100vw';

//         document.body.appendChild(pipe_sprite_inv);
//         let pipe_sprite = document.createElement('div');
//         pipe_sprite.className = 'pipe_sprite';
//         pipe_sprite.style.top = pipe_posi + pipe_gap + 'vh';
//         pipe_sprite.style.left = '100vw';
//         pipe_sprite.increase_score = '1';

//         document.body.appendChild(pipe_sprite);
//     }
//     pipe_seperation++;
//     requestAnimationFrame(create_pipe);
// }




// function play(){
    
//     requestAnimationFrame(move);

//     // let bird_dy = 0;
//     // function apply_gravity(){
//     //     if(game_state != 'Play') return;
//     //     bird_dy = bird_dy + grativy;
//     //     document.addEventListener('keydown', (e) => {
//     //         if(e.key == 'ArrowUp' || e.key == ' '){
//     //             img.src = 'images/Bird-2.png';
//     //             bird_dy = -7.6;
//     //         }
//     //     });

//     //     document.addEventListener('keyup', (e) => {
//     //         if(e.key == 'ArrowUp' || e.key == ' '){
//     //             img.src = 'images/Bird.png';
//     //         }
//     //     });

//     //     if(bird_props.top <= 0 || bird_props.bottom >= background.bottom){
//     //         game_state = 'End';
//     //         message.style.left = '28vw';
//     //         window.location.reload();
//     //         message.classList.remove('messageStyle');
//     //         return;
//     //     }
//     //     bird.style.top = bird_props.top + bird_dy + 'px';
//     //     bird_props = bird.getBoundingClientRect();
//     //     requestAnimationFrame(apply_gravity);
//     // }

//     let bird_dy = 0;
// const terminalVelocity = 2; // Define the maximum downward speed

// // function apply_gravity() {
// //     if (game_state !== 'Play') return;

// //     bird_dy = Math.min(bird_dy + grativy, terminalVelocity);

// //     // Update bird image when touch start is detected
// //     document.addEventListener('touchstart', (e) => {
// //         img.src = 'images/Bird-2.png';
// //         bird_dy = -7.6; // Set the upward velocity when the bird jumps
// //     });

// //     // Update bird image when touch end is detected
// //     document.addEventListener('touchend', (e) => {
// //         img.src = 'images/Bird.png';
// //     });

// //     // Check if the bird is touching the top or bottom of the screen
// //     if (bird_props.top <= 0 || bird_props.bottom >= background.bottom) {
// //         // Game over condition
// //         game_state = 'End';
// //         message.style.left = '28vw';
// //         window.location.reload();
// //         message.classList.remove('messageStyle');
// //         return;
// //     }

// //     // Move the bird vertically based on its velocity
// //     bird.style.top = bird_props.top + bird_dy + 'px';
// //     bird_props = bird.getBoundingClientRect();

// //     // Call apply_gravity function recursively using requestAnimationFrame
// //     requestAnimationFrame(apply_gravity);
// // }

// // let bird_dy = 0;
// // const terminalVelocity = 2; // Define the maximum downward speed

// // function apply_gravity() {
// //     if (game_state !== 'Play') return;

// //     bird_dy = Math.min(bird_dy + grativy, terminalVelocity);

// //     // Update bird image and velocity when touch start is detected or arrow key is pressed
// //     const jumpAction = () => {
// //         img.src = 'images/Bird-2.png';
// //         bird_dy = -7.6; // Set the upward velocity when the bird jumps
// //     };
// //     document.addEventListener('touchstart', jumpAction);
// //     document.addEventListener('keydown', (e) => {
// //         if (e.key === 'ArrowUp' || e.key === ' ') {
            
// //             jumpAction();
// //         }
// //     });

// //     // Update bird image when touch end is detected
// //     document.addEventListener('touchend', (e) => {
// //         img.src = 'images/Bird.png';
// //     });

// //     // Check if the bird is touching the top or bottom of the screen
// //     if (bird_props.top <= 0 || bird_props.bottom >= background.bottom) {
// //         // Game over condition
// //         game_state = 'End';
// //         message.style.left = '28vw';
// //         window.location.reload();
// //         message.classList.remove('messageStyle');
// //         return;
// //     }

// //     // Move the bird vertically based on its velocity
// //     bird.style.top = bird_props.top + bird_dy + 'px';
// //     bird_props = bird.getBoundingClientRect();

// //     // Call apply_gravity function recursively using requestAnimationFrame
// //     requestAnimationFrame(apply_gravity);
// // }







//     requestAnimationFrame(apply_gravity);

//     let pipe_seperation = 0;

//     let pipe_gap = 35;

    
//     requestAnimationFrame(create_pipe);
// }





// // Define bird_dy outside the functions to make it accessible globally
// // 


//  // Define the maximum downward speed

// // Function to start the game
// function startGame() {
//     if (game_state !== 'Play') {
//         // Reset game state and display necessary elements
//         game_state = 'Play';
//         document.querySelectorAll('.pipe_sprite').forEach((e) => {
//             e.remove();
//         });
//         img.style.display = 'block';
//         bird.style.top = '40vh';
//         message.innerHTML = '';
//         score_title.innerHTML = 'Score : ';
//         score_val.innerHTML = '0';
//         message.classList.remove('messageStyle');
//         play(); // Call the play function to start the game
//     }
// }

// // Function to handle touch start event
// function handleTouchStart(e) {
//     startGame(); // Start the game when touched
// }

// // Function to handle touch end event
// function handleTouchEnd(e) {
//     // No action needed for touch end
// }

// // Add touch event listeners for touchstart and touchend
// document.addEventListener('touchstart', handleTouchStart);
// document.addEventListener('touchend', handleTouchEnd);

// // Apply gravity function (unchanged)
// // function apply_gravity() {
// //     if (game_state !== 'Play') return;

// //     bird_dy = Math.min(bird_dy + grativy, terminalVelocity);

// //     document.addEventListener('keydown', (e) => {
// //         if (e.key === 'ArrowUp' || e.key === ' ') {
// //             img.src = 'images/Bird-2.png';
// //             bird_dy = -7.6; // Set the upward velocity when the bird jumps
// //         }
// //     });

// //     document.addEventListener('keyup', (e) => {
// //         if (e.key === 'ArrowUp' || e.key === ' ') {
// //             img.src = 'images/Bird.png';
// //         }
// //     });

// //     if (bird_props.top <= 0 || bird_props.bottom >= background.bottom) {
// //         game_state = 'End';
// //         message.style.left = '28vw';
// //         window.location.reload();
// //         message.classList.remove('messageStyle');
// //         return;
// //     }

// //     bird.style.top = bird_props.top + bird_dy + 'px';
// //     bird_props = bird.getBoundingClientRect();

// //     requestAnimationFrame(apply_gravity);
// // }

// // Function to handle touch start event
// // function handleTouchStart(e) {
// //     if (game_state !== 'Play') {
// //         startGame(); // Start the game if not already playing
// //     } else {
// //         img.src = 'images/Bird-2.png'; // Change bird image
// //         bird_dy = -7.6; // Set upward velocity when touched
// //     }
// // }














// // Update bird image and velocity when touch start is detected
// // document.addEventListener('touchstart', (e) => {
// //   jumpAction();
// // });

// // Update bird image and velocity when arrow up key is pressed
// // document.addEventListener('keydown', (e) => {
// //   if (game_state === 'Play' && (e.key === 'ArrowUp' || e.key === ' ')) {
// //       jumpAction();
// //   }
// // });

// // Reset bird image when touch end is detected
// // document.addEventListener('touchend', (e) => {
// //   img.src = 'images/Bird.png';
// // });

// // Reset bird image when arrow up key is released
// // document.addEventListener('keyup', (e) => {
// //   if (game_state === 'Play' && (e.key === 'ArrowUp' || e.key === ' ')) {
// //       img.src = 'images/Bird.png';
// //   }
// // });


// // function apply_gravity() {
// //   if (!isGamePaused) {
// //       bird_dy = Math.min(bird_dy + gravity, terminalVelocity);

// //       const jumpAction = () => {
// //           img.src = 'images/Bird-2.png';
// //           bird_dy = -7.6;
// //       };

// //       document.addEventListener('touchstart', jumpAction);

// //       document.addEventListener('keydown', (e) => {
// //           if (e.key === 'ArrowUp' || e.key === ' ') {
// //               jumpAction();
// //           }
// //       });

// //       document.addEventListener('touchend', (e) => {
// //           img.src = 'images/Bird.png';
// //       });

// //       document.addEventListener('keyup', (e) => {
// //           if (e.key === 'ArrowUp' || e.key === ' ') {
// //               img.src = 'images/Bird.png';
// //           }
// //       });

// //       if (bird_props.top <= 0 || bird_props.bottom >= background.bottom) {
// //           game_state = 'End';
// //           message.style.left = '28vw';
// //           window.location.reload();
// //           message.classList.remove('messageStyle');
// //           return;
// //       }

// //       bird.style.top = bird_props.top + bird_dy + 'px';
// //       bird_props = bird.getBoundingClientRect();
// //   }
// //   if (!isGamePaused) {
// //       requestAnimationFrame(apply_gravity);
// //   }
// // }



















const QuestionList = [
  { 'Q1': "What is Your Name" },
  { 'Q2': "What is Your School Name" },
  { 'Q3': "What is Your father Name" },
  { 'Q4': "What is Your Mother Name" },
  { 'Q5': "What is Your Brother Name" },
  { 'Q6': "Where are you From" },
  { 'Q7': "What is going on?" },
  { 'Q8': "Had a Dinner?" },
  { 'Q9': "why 1+1 is equal to 2?" },
  {'Q10': "Explain Newtons law of motion?"}
];

let currentQuestionIndex = 0;
let isGamePaused = false;
let bird_dy = 0;
  const terminalVelocity = 2;
  let pipe_seperation = 0;
  let pipe_gap = 35;



function displayQuestion() {
  if (currentQuestionIndex < QuestionList.length) {
    const currentQuestion = QuestionList[currentQuestionIndex];
    displayQuestionInModal(Object.values(currentQuestion)[0]);
    currentQuestionIndex++;
  } else {
    currentQuestionIndex = 0;
    onGameOver();
  }
}




function displayQuestionInModal(question) {
  pauseGame(); // Pause the game before displaying the question modal
  $('#questionText').text(question);

  // Show the modal
  $('#questionModal').modal('show');
}



// Rest of your code...

function pauseGame() {
  isGamePaused = true;
  message.classList.add('pausedMessage');
  
  // Remove event listeners for vertical movement
  document.removeEventListener('touchstart', jumpAction);
  document.removeEventListener('keydown', jumpAction);
}

function resumeGame() {
  isGamePaused = false;
  document.getElementById("bird-1").style.display ='block';
  $('#questionModal').modal('hide'); // Close the modal
  
  // Re-add event listeners for vertical movement
  document.addEventListener('touchstart', jumpAction);
  document.addEventListener('keydown', jumpAction);
  
  // Resume the animations and game logic here
  move();
  requestAnimationFrame(apply_gravity);
  requestAnimationFrame(create_pipe);
}



function togglePauseResume() {
  if (isGamePaused) {
    resumeGame();
  } else {
    pauseGame();
  }
}

document.addEventListener('keydown', (e) => {
  if (e.key === ' ' && game_state === 'Play') {
    togglePauseResume();
  }
});

document.addEventListener('touchstart', (e) => {
  if (game_state === 'Play') {
    togglePauseResume();
  }
});

document.addEventListener('keydown', (e) => {
  if (e.key === ' ') { // Spacebar key
    togglePauseResume();
  }
});

document.addEventListener('touchstart', (e) => {
  togglePauseResume();
});

let move_speed = 3, gravity = 0.5;
let bird = document.querySelector('.bird');
let img = document.getElementById('bird-1');
let sound_point = new Audio('sounds effect/point.mp3');

let bird_props = bird.getBoundingClientRect();
let background = document.querySelector('.background').getBoundingClientRect();
let score_val = document.querySelector('.score_val');
let message = document.querySelector('.message');
let score_title = document.querySelector('.score_title');
let game_state = 'Start';

img.style.display = 'none';
message.classList.add('messageStyle');

document.addEventListener('keydown', (e) => {
    if(e.key == 'Enter' && game_state != 'Play'){
        document.querySelectorAll('.pipe_sprite').forEach((e) => {
            e.remove();
        });
        img.style.display = 'block';
        bird.style.top = '40vh';
        game_state = 'Play';
        message.innerHTML = '';
        score_title.innerHTML = 'Score : ';
        score_val.innerHTML = '0';
        message.classList.remove('messageStyle');
        play();
    }
});






function play() {
  
  requestAnimationFrame(move);

  requestAnimationFrame(apply_gravity);

  requestAnimationFrame(create_pipe);
}


function move() {
  if (!isGamePaused) {
      let pipe_sprite = document.querySelectorAll('.pipe_sprite');
      pipe_sprite.forEach((element) => {
          let pipe_sprite_props = element.getBoundingClientRect();
          bird_props = bird.getBoundingClientRect();

          if (pipe_sprite_props.right <= 0) {
              element.remove();
          } else {
              if (
                  pipe_sprite_props.right < bird_props.left &&
                  pipe_sprite_props.right + move_speed >= bird_props.left &&
                  element.increase_score == '1'
              ) {
                  score_val.innerHTML = +score_val.innerHTML + 1;
                  sound_point.play();
                  pauseGame();
                  displayQuestion();
              }
              element.style.left = pipe_sprite_props.left - move_speed + 'px';
          }
      });
  }
  if (!isGamePaused) {
      requestAnimationFrame(move);
  }
}

function create_pipe() {
  if (!isGamePaused) {
      if (pipe_seperation > 215) {
          pipe_seperation = 0;

          let pipe_posi = Math.floor(Math.random() * 43) + 8;
          let pipe_sprite_inv = document.createElement('div');
          pipe_sprite_inv.className = 'pipe_sprite';
          pipe_sprite_inv.style.top = pipe_posi - 70 + 'vh';
          pipe_sprite_inv.style.left = '100vw';

          document.body.appendChild(pipe_sprite_inv);
          let pipe_sprite = document.createElement('div');
          pipe_sprite.className = 'pipe_sprite';
          pipe_sprite.style.top = pipe_posi + pipe_gap + 'vh';
          pipe_sprite.style.left = '100vw';
          pipe_sprite.increase_score = '1';

          document.body.appendChild(pipe_sprite);
      }
      pipe_seperation++;
      requestAnimationFrame(create_pipe);
  }
}



// Define jumpAction function outside of apply_gravity


// Define jumpAction function outside of apply_gravity
// Define jumpAction function
const jumpAction = () => {
  console.log('Jump action triggered'); // Add a console log for debugging
  img.src = 'images/Bird-2.png'; // Change bird image to indicate jump
  bird_dy = -7.6; // Apply vertical velocity to make the bird jump
};




// Variable to track whether apply_gravity has been called in the current frame
// Variable to track whether gravity has been applied during touch event
let isGravityApplied = false;

// Call apply_gravity directly within the touchstart event listener
// document.addEventListener('touchstart', () => {
//   if (!isGamePaused) {
//     apply_gravity();
//     isGravityApplied = true;
//   }
// });

// // Call apply_gravity during touchmove event to continuously apply gravity
// document.addEventListener('touchmove', () => {
//   if (!isGamePaused && !isGravityApplied) {
//     apply_gravity();
//     isGravityApplied = true;
//   }
// });

// // Reset bird image when touch end is detected
// document.addEventListener('touchend', () => {
//   img.src = 'images/Bird.png';
//   isGravityApplied = false;
// });





// Check if the game state allows for arrow key and touch input
document.addEventListener('keydown', (e) => {
  if ((e.key === 'ArrowUp' || e.key === ' ') && game_state === 'Play') {
    jumpAction();
  }
});



function apply_gravity() {


  console.log('Apply gravity called'); // Add a console log for debugging

  if (!isGamePaused) {
    bird_dy = Math.min(bird_dy + gravity, terminalVelocity);

    // Check if the bird collides with the top or bottom of the screen
    if (bird_props.top <= 0 || bird_props.bottom >= background.bottom) {
      // Game over condition
      game_state = 'End';
      message.style.left = '28vw';
      window.location.reload();
      message.classList.remove('messageStyle');
      return;
    }

    // Move the bird vertically based on its velocity
    bird.style.top = bird_props.top + bird_dy + 'px';
    bird_props = bird.getBoundingClientRect();

    // Call apply_gravity function recursively using requestAnimationFrame
    requestAnimationFrame(apply_gravity);
    console.log('RequestAnimationFrame called'); // Add a console log for debugging

  }
}




function startGame() {
  if (game_state !== 'Play') {
      // Reset game state and display necessary elements
      game_state = 'Play';
      document.querySelectorAll('.pipe_sprite').forEach((e) => {
          e.remove();
      });
      img.style.display = 'block';
      bird.style.top = '40vh';
      message.innerHTML = '';
      score_title.innerHTML = 'Score : ';
      score_val.innerHTML = '0';
      message.classList.remove('messageStyle');
      play(); // Call the play function to start the game
  }
}

// function handleTouchStart(e) {
//   startGame();
// }

// Function to handle touch events
// function handleTouchStart(e) {
//   if (game_state === 'Play') {
//     startGame(); // Start the game
    
//   }
// }

// // Add event listener for touch events
// document.addEventListener('touchstart', handleTouchStart);

// function handleTouchEnd(e) {
// }

// document.addEventListener('touchend', handleTouchEnd);











// Add touch event listeners
// Add touch event listener to trigger jump action
document.addEventListener('touchstart', () => {
  if (game_state === 'Play') {
    jumpAction(); // Trigger jump action when screen is touched
  }
});

document.addEventListener('touchmove', (e) => {
  handleTouchMove(e);
});

document.addEventListener('touchend', (e) => {
  handleTouchEnd(e);
});

// Touch start handler
function handleTouchStart(e) {
  if (game_state === 'Play') {
    startGame(); // Start the game
    e.preventDefault(); // Prevent default touch behavior
  }
}

// Touch move handler (optional)
function handleTouchMove(e) {
  // Handle touch move if needed
}

// Touch end handler (optional)
function handleTouchEnd(e) {
  // Handle touch end if needed
}




// const QuestionList = [
//   { 'Q1': "What is Your Name" },
//   { 'Q2': "What is Your School Name" },
//   { 'Q3': "What is Your father Name" },
//   { 'Q4': "What is Your Mother Name" },
//   { 'Q5': "What is Your Brother Name" },
//   { 'Q6': "Where are you From" },
//   { 'Q7': "What is going on?" },
//   { 'Q8': "Had a Dinner?" },
//   { 'Q9': "why 1+1 is equal to 2?" },
//   {'Q10': "Explain Newtons law of motion?"}
// ];

// let currentQuestionIndex = 0;
// let isGamePaused = false;
// let bird_dy = 0;
//   const terminalVelocity = 2;
//   let pipe_seperation = 0;
//   let pipe_gap = 35;



// function displayQuestion() {
//   if (currentQuestionIndex < QuestionList.length) {
//     const currentQuestion = QuestionList[currentQuestionIndex];
//     displayQuestionInModal(Object.values(currentQuestion)[0]);
//     currentQuestionIndex++;
//   } else {
//     currentQuestionIndex = 0;
//     onGameOver();
//   }
// }




// function displayQuestionInModal(question) {
//   pauseGame(); // Pause the game before displaying the question modal
//   $('#questionText').text(question);

//   // Show the modal
//   $('#questionModal').modal('show');
// }



// // Rest of your code...

// function pauseGame() {
//   isGamePaused = true;
//   message.classList.add('pausedMessage');
  
//   // Remove event listeners for vertical movement
//   document.removeEventListener('touchstart', jumpAction);
//   document.removeEventListener('keydown', jumpAction);
// }

// function resumeGame() {
//   isGamePaused = false;
//   document.getElementById("bird-1").style.display ='block';
//   $('#questionModal').modal('hide'); // Close the modal
  
//   // Re-add event listeners for vertical movement
//   document.addEventListener('touchstart', jumpAction);
//   document.addEventListener('keydown', jumpAction);
  
//   // Resume the animations and game logic here
//   move();
//   requestAnimationFrame(apply_gravity);
//   requestAnimationFrame(create_pipe);
// }



// function togglePauseResume() {
//   if (isGamePaused) {
//     resumeGame();
//   } else {
//     pauseGame();
//   }
// }

// document.addEventListener('keydown', (e) => {
//   if (e.key === ' ' && game_state === 'Play') {
//     togglePauseResume();
//   }
// });

// document.addEventListener('touchstart', (e) => {
//   if (game_state === 'Play') {
//     togglePauseResume();
//   }
// });

// document.addEventListener('keydown', (e) => {
//   if (e.key === ' ') { // Spacebar key
//     togglePauseResume();
//   }
// });

// document.addEventListener('touchstart', (e) => {
//   togglePauseResume();
// });

// let move_speed = 3, gravity = 0.5;
// let bird = document.querySelector('.bird');
// let img = document.getElementById('bird-1');
// let sound_point = new Audio('sounds effect/point.mp3');

// let bird_props = bird.getBoundingClientRect();
// let background = document.querySelector('.background').getBoundingClientRect();
// let score_val = document.querySelector('.score_val');
// let message = document.querySelector('.message');
// let score_title = document.querySelector('.score_title');
// let game_state = 'Start';

// img.style.display = 'none';
// message.classList.add('messageStyle');

// document.addEventListener('keydown', (e) => {
//     if(e.key == 'Enter' && game_state != 'Play'){
//         document.querySelectorAll('.pipe_sprite').forEach((e) => {
//             e.remove();
//         });
//         img.style.display = 'block';
//         bird.style.top = '40vh';
//         game_state = 'Play';
//         message.innerHTML = '';
//         score_title.innerHTML = 'Score : ';
//         score_val.innerHTML = '0';
//         message.classList.remove('messageStyle');
//         play();
//     }
// });






// function play() {
  
//   requestAnimationFrame(move);

//   requestAnimationFrame(apply_gravity);

//   requestAnimationFrame(create_pipe);
// }


// function move() {
//   if (!isGamePaused) {
//       let pipe_sprite = document.querySelectorAll('.pipe_sprite');
//       pipe_sprite.forEach((element) => {
//           let pipe_sprite_props = element.getBoundingClientRect();
//           bird_props = bird.getBoundingClientRect();

//           if (pipe_sprite_props.right <= 0) {
//               element.remove();
//           } else {
//               if (
//                   pipe_sprite_props.right < bird_props.left &&
//                   pipe_sprite_props.right + move_speed >= bird_props.left &&
//                   element.increase_score == '1'
//               ) {
//                   score_val.innerHTML = +score_val.innerHTML + 1;
//                   sound_point.play();
//                   pauseGame();
//                   displayQuestion();
//               }
//               element.style.left = pipe_sprite_props.left - move_speed + 'px';
//           }
//       });
//   }
//   if (!isGamePaused) {
//       requestAnimationFrame(move);
//   }
// }

// function create_pipe() {
//   if (!isGamePaused) {
//       if (pipe_seperation > 215) {
//           pipe_seperation = 0;

//           let pipe_posi = Math.floor(Math.random() * 43) + 8;
//           let pipe_sprite_inv = document.createElement('div');
//           pipe_sprite_inv.className = 'pipe_sprite';
//           pipe_sprite_inv.style.top = pipe_posi - 70 + 'vh';
//           pipe_sprite_inv.style.left = '100vw';

//           document.body.appendChild(pipe_sprite_inv);
//           let pipe_sprite = document.createElement('div');
//           pipe_sprite.className = 'pipe_sprite';
//           pipe_sprite.style.top = pipe_posi + pipe_gap + 'vh';
//           pipe_sprite.style.left = '100vw';
//           pipe_sprite.increase_score = '1';

//           document.body.appendChild(pipe_sprite);
//       }
//       pipe_seperation++;
//       requestAnimationFrame(create_pipe);
//   }
// }




// // Define jumpAction function
// const jumpAction = () => {
//   console.log('Jump action triggered'); // Add a console log for debugging
//   img.src = 'images/Bird-2.png'; // Change bird image to indicate jump
//   bird_dy = -7.6; // Apply vertical velocity to make the bird jump
// };

// // Add touch event listener to trigger jump action
// document.addEventListener('touchstart', (event) => {
//   console.log('Touch detected'); // Add a console log to check if touch is detected
//   if (game_state === 'Play') {
//     jumpAction(); // Trigger jump action when screen is touched
//   }
// });


// // Add event listener for spacebar key
// document.addEventListener('keydown', (e) => {
//   if ((e.key === 'ArrowUp' || e.key === ' ') && game_state === 'Play') {
//     jumpAction(); // Trigger jump action when spacebar or up arrow key is pressed
//   }
// });




// // Check if the game state allows for arrow key and touch input
// // document.addEventListener('keydown', (e) => {
// //   if ((e.key === 'ArrowUp' || e.key === ' ') && game_state === 'Play') {
// //     jumpAction();
// //   }
// // });



// function apply_gravity() {


//   console.log('Apply gravity called'); // Add a console log for debugging

//   if (!isGamePaused) {
//     bird_dy = Math.min(bird_dy + gravity, terminalVelocity);

//     // Check if the bird collides with the top or bottom of the screen
//     if (bird_props.top <= 0 || bird_props.bottom >= background.bottom) {
//       // Game over condition
//       game_state = 'End';
//       message.style.left = '28vw';
//       window.location.reload();
//       message.classList.remove('messageStyle');
//       return;
//     }

//     // Move the bird vertically based on its velocity
//     bird.style.top = bird_props.top + bird_dy + 'px';
//     bird_props = bird.getBoundingClientRect();

//     // Call apply_gravity function recursively using requestAnimationFrame
//     requestAnimationFrame(apply_gravity);
//     console.log('RequestAnimationFrame called'); // Add a console log for debugging

//   }
// }




// function startGame() {
//   if (game_state !== 'Play') {
//       // Reset game state and display necessary elements
//       game_state = 'Play';
//       document.querySelectorAll('.pipe_sprite').forEach((e) => {
//           e.remove();
//       });
//       img.style.display = 'block';
//       bird.style.top = '40vh';
//       message.innerHTML = '';
//       score_title.innerHTML = 'Score : ';
//       score_val.innerHTML = '0';
//       message.classList.remove('messageStyle');
//       play(); // Call the play function to start the game
//   }
// }



// // Add touch event listeners
// // Add touch event listener to trigger jump action
// // document.addEventListener('touchstart', () => {
// //   if (game_state === 'Play') {
// //     jumpAction(); // Trigger jump action when screen is touched
// //   }
// // });

// // document.addEventListener('touchmove', (e) => {
// //   handleTouchMove(e);
// // });

// // document.addEventListener('touchend', (e) => {
// //   handleTouchEnd(e);
// // });

// // // Touch start handler
// // function handleTouchStart(e) {
// //   if (game_state === 'Play') {
// //     startGame(); // Start the game
// //     e.preventDefault(); // Prevent default touch behavior
// //   }
// // }

// // // Touch move handler (optional)
// // function handleTouchMove(e) {
// //   // Handle touch move if needed
// // }

// // // Touch end handler (optional)
// // function handleTouchEnd(e) {
// //   // Handle touch end if needed
// // }








// // Remove duplicate event listeners
// document.addEventListener('keydown', (e) => {
//   if (e.key === ' ') { // Spacebar key
//     togglePauseResume();
//   }
// });

// // Add touch event listeners
// document.addEventListener('touchstart', (e) => {
//   if (game_state === 'Play') {
//     togglePauseResume(); // Toggle pause/resume on touchstart
//   }
// });

// // Define touch event handlers
// function handleTouchStart(e) {
//   if (game_state === 'Play') {
//     togglePauseResume(); // Toggle pause/resume on touchstart
//     e.preventDefault(); // Prevent default touch behavior
//   }
// }

// // Attach touch event handler to document
// document.addEventListener('touchstart', handleTouchStart);

// // Optional touch move handler (if needed)
// document.addEventListener('touchmove', (e) => {
//   // Handle touch move if needed
// });

// // Optional touch end handler (if needed)
// document.addEventListener('touchend', (e) => {
//   // Handle touch end if needed
// });


// // Remove duplicate event listeners for spacebar key
// document.addEventListener('keydown', (e) => {
//   if (e.key === ' ') { // Spacebar key
//     togglePauseResume();
//   }
// });

// // Add click event listener to the body
// document.body.addEventListener('click', (e) => {
//   if (game_state === 'Play') {
//     jumpAction(); // Trigger jump action when body is clicked
//   }
// });

// // Define jumpAction function to make the bird fly
// // const jumpAction = () => {
// //   console.log('Jump action triggered'); // Add a console log for debugging
// //   img.src = 'images/Bird-2.png'; // Change bird image to indicate jump
// //   bird_dy = -7.6; // Apply vertical velocity to make the bird jump
// // };

// // Attach click event handler to the body
// document.body.addEventListener('click', (e) => {
//   if (game_state === 'Play') {
//     jumpAction(); // Trigger jump action when body is clicked
//   }
// });




// final code




// const QuestionList = [
//   { 'Q1': "What is Your Name" },
//   { 'Q2': "What is Your School Name" },
//   { 'Q3': "What is Your father Name" },
//   { 'Q4': "What is Your Mother Name" },
//   { 'Q5': "What is Your Brother Name" },
//   { 'Q6': "Where are you From" },
//   { 'Q7': "What is going on?" },
//   { 'Q8': "Had a Dinner?" },
//   { 'Q9': "why 1+1 is equal to 2?" },
//   {'Q10': "Explain Newtons law of motion?"}
// ];

// let currentQuestionIndex = 0;
// let isGamePaused = false;
// let bird_dy = 0;
// const terminalVelocity = 2;
// let pipe_seperation = 0;
// let pipe_gap = 35;

// function displayQuestion() {
//   if (currentQuestionIndex < QuestionList.length) {
//     const currentQuestion = QuestionList[currentQuestionIndex];
//     displayQuestionInModal(Object.values(currentQuestion)[0]);
//     currentQuestionIndex++;
//   } else {
//     currentQuestionIndex = 0;
//     onGameOver();
//   }
// }

// function displayQuestionInModal(question) {
//   pauseGame(); // Pause the game before displaying the question modal
//   $('#questionText').text(question);

//   // Show the modal
//   $('#questionModal').modal('show');
// }

// function pauseGame() {
//   isGamePaused = true;
//   message.classList.add('pausedMessage');
// }

// function resumeGame() {
//   isGamePaused = false;
//   document.getElementById("bird-1").style.display ='block';
//   $('#questionModal').modal('hide'); // Close the modal

//   // Resume the animations and game logic here
//   move();
//   requestAnimationFrame(apply_gravity);
//   requestAnimationFrame(create_pipe);
// }

// function togglePauseResume() {
//   if (isGamePaused) {
//     resumeGame();
//   } else {
//     pauseGame();
//   }
// }

// document.body.addEventListener('click', (e) => {
//   if (game_state === 'Play') {
//     jumpAction(); // Trigger jump action when body is clicked
//   }
// });

// let move_speed = 3, gravity = 0.5;
// let bird = document.querySelector('.bird');
// let img = document.getElementById('bird-1');
// let sound_point = new Audio('sounds effect/point.mp3');

// let bird_props = bird.getBoundingClientRect();
// let background = document.querySelector('.background').getBoundingClientRect();
// let score_val = document.querySelector('.score_val');
// let message = document.querySelector('.message');
// let score_title = document.querySelector('.score_title');
// let game_state = 'Start';

// img.style.display = 'none';
// message.classList.add('messageStyle');

// document.addEventListener('keydown', (e) => {
//   if(e.key == 'Enter' && game_state != 'Play'){
//     document.querySelectorAll('.pipe_sprite').forEach((e) => {
//       e.remove();
//     });
//     img.style.display = 'block';
//     bird.style.top = '40vh';
//     game_state = 'Play';
//     message.innerHTML = '';
//     score_title.innerHTML = 'Score : ';
//     score_val.innerHTML = '0';
//     message.classList.remove('messageStyle');
//     play();
//   }
// });

// function play() {
//   requestAnimationFrame(move);
//   requestAnimationFrame(apply_gravity);
//   requestAnimationFrame(create_pipe);
// }

// function move() {
//   if (!isGamePaused) {
//     let pipe_sprite = document.querySelectorAll('.pipe_sprite');
//     pipe_sprite.forEach((element) => {
//       let pipe_sprite_props = element.getBoundingClientRect();
//       bird_props = bird.getBoundingClientRect();

//       if (pipe_sprite_props.right <= 0) {
//         element.remove();
//       } else {
//         if (
//           pipe_sprite_props.right < bird_props.left &&
//           pipe_sprite_props.right + move_speed >= bird_props.left &&
//           element.increase_score == '1'
//         ) {
//           score_val.innerHTML = +score_val.innerHTML + 1;
//           sound_point.play();
//           pauseGame();
//           displayQuestion();
//         }
//         element.style.left = pipe_sprite_props.left - move_speed + 'px';
//       }
//     });
//   }
//   if (!isGamePaused) {
//     requestAnimationFrame(move);
//   }
// }

// function create_pipe() {
//   if (!isGamePaused) {
//     if (pipe_seperation > 215) {
//       pipe_seperation = 0;

//       let pipe_posi = Math.floor(Math.random() * 43) + 8;
//       let pipe_sprite_inv = document.createElement('div');
//       pipe_sprite_inv.className = 'pipe_sprite';
//       pipe_sprite_inv.style.top = pipe_posi - 70 + 'vh';
//       pipe_sprite_inv.style.left = '100vw';

//       document.body.appendChild(pipe_sprite_inv);
//       let pipe_sprite = document.createElement('div');
//       pipe_sprite.className = 'pipe_sprite';
//       pipe_sprite.style.top = pipe_posi + pipe_gap + 'vh';
//       pipe_sprite.style.left = '100vw';
//       pipe_sprite.increase_score = '1';

//       document.body.appendChild(pipe_sprite);
//     }
//     pipe_seperation++;
//     requestAnimationFrame(create_pipe);
//   }
// }

// const jumpAction = () => {
//   img.src = 'images/Bird-2.png'; // Change bird image to indicate jump
//   bird_dy = -7.6; // Apply vertical velocity to make the bird jump

//   // After a short delay, revert the bird image back to original
//   setTimeout(() => {
//     img.src = 'images/Bird.png';
//   }, 200); // Adjust the delay as needed
// };

// document.addEventListener('keydown', (e) => {
//   if ((e.key === 'ArrowUp' || e.key === ' ') && game_state === 'Play') {
//     jumpAction(); // Trigger jump action when spacebar or up arrow key is pressed
//   }
// });

// function apply_gravity() {
//   if (!isGamePaused) {
//     bird_dy = Math.min(bird_dy + gravity, terminalVelocity);

//     if (bird_props.top <= 0 || bird_props.bottom >= background.bottom) {
//       game_state = 'End';
//       message.style.left = '28vw';
//       window.location.reload();
//       message.classList.remove('messageStyle');
//       return;
//     }

//     bird.style.top = bird_props.top + bird_dy + 'px';
//     bird_props = bird.getBoundingClientRect();

//     requestAnimationFrame(apply_gravity);
//   }
// }

// function startGame() {
//   if (game_state !== 'Play') {
//     game_state = 'Play';
//     document.querySelectorAll('.pipe_sprite').forEach((e) => {
//       e.remove();
//     });
//     img.style.display = 'block';
//     bird.style.top = '40vh';
//     message.innerHTML = '';
//     score_title.innerHTML = 'Score : ';
//     score_val.innerHTML = '0';
//     message.classList.remove('messageStyle');
//     play();
//   }
// }




// document.addEventListener('touchstart', () => {
//   startGame(); // Start the game when the screen is touched
// });

// document.addEventListener('touchend', () => {
//   // Optionally, you can handle touchend event if needed
// });

// function startGame() {
//   if (game_state !== 'Play') {
//     game_state = 'Play';
//     document.querySelectorAll('.pipe_sprite').forEach((e) => {
//       e.remove();
//     });
//     img.style.display = 'block'; // Ensure bird image is displayed
//     bird.style.top = '40vh'; // Set initial bird position
//     message.innerHTML = '';
//     score_title.innerHTML = 'Score : ';
//     score_val.innerHTML = '0';
//     message.classList.remove('messageStyle');
//     play();
//   }
// }

// // Function to hide the bird image at the beginning
// function hideBird() {
//   img.style.display = 'none';
// }

// // Call hideBird() initially to hide the bird image
// hideBird();

//latest

// const QuestionList = [
//   { 'Q1': "What is Your Name" },
//   { 'Q2': "What is Your School Name" },
//   { 'Q3': "What is Your father Name" },
//   { 'Q4': "What is Your Mother Name" },
//   { 'Q5': "What is Your Brother Name" },
//   { 'Q6': "Where are you From" },
//   { 'Q7': "What is going on?" },
//   { 'Q8': "Had a Dinner?" },
//   { 'Q9': "why 1+1 is equal to 2?" },
//   {'Q10': "Explain Newtons law of motion?"}
// ];

// let currentQuestionIndex = 0;
// let isGamePaused = false;
// let bird_dy = 0;
// const terminalVelocity = 2;
// let pipe_seperation = 0;
// let pipe_gap = 35;

// function displayQuestion() {
//   if (currentQuestionIndex < QuestionList.length) {
//     const currentQuestion = QuestionList[currentQuestionIndex];
//     displayQuestionInModal(Object.values(currentQuestion)[0]);
//     currentQuestionIndex++;
//   } else {
//     currentQuestionIndex = 0;
//     onGameOver();
//   }
// }

// function displayQuestionInModal(question) {
//   pauseGame(); // Pause the game before displaying the question modal
//   $('#questionText').text(question);

//   // Show the modal
//   $('#questionModal').modal('show');
// }

// function pauseGame() {
//   isGamePaused = true;
//   message.classList.add('pausedMessage');
// }

// function resumeGame() {
//   isGamePaused = false;
//   document.getElementById("bird-1").style.display ='block';
//   $('#questionModal').modal('hide'); // Close the modal

//   // Resume the animations and game logic here
//   move();
//   requestAnimationFrame(apply_gravity);
//   requestAnimationFrame(create_pipe);
// }

// function togglePauseResume() {
//   if (isGamePaused) {
//     resumeGame();
//   } else {
//     pauseGame();
//   }
// }

// document.body.addEventListener('click', (e) => {
//   if (game_state === 'Play') {
//     jumpAction(); // Trigger jump action when body is clicked
//   }
// });

// let move_speed = 3, gravity = 0.5;
// let bird = document.querySelector('.bird');
// let img = document.getElementById('bird-1');
// let sound_point = new Audio('sounds effect/point.mp3');

// let bird_props = bird.getBoundingClientRect();
// let background = document.querySelector('.background').getBoundingClientRect();
// let score_val = document.querySelector('.score_val');
// let message = document.querySelector('.message');
// let score_title = document.querySelector('.score_title');
// let game_state = 'Start';

// img.style.display = 'none';
// message.classList.add('messageStyle');

// document.addEventListener('keydown', (e) => {
//   if(e.key == 'Enter' && game_state != 'Play'){
//     document.querySelectorAll('.pipe_sprite').forEach((e) => {
//       e.remove();
//     });
//     img.style.display = 'block';
//     bird.style.top = '40vh';
//     game_state = 'Play';
//     message.innerHTML = '';
//     score_title.innerHTML = 'Score : ';
//     score_val.innerHTML = '0';
//     message.classList.remove('messageStyle');
//     play();
//   }
// });

// function play() {
//   requestAnimationFrame(move);
//   requestAnimationFrame(apply_gravity);
//   requestAnimationFrame(create_pipe);
// }

// function move() {
//   if (!isGamePaused) {
//     let pipe_sprite = document.querySelectorAll('.pipe_sprite');
//     pipe_sprite.forEach((element) => {
//       let pipe_sprite_props = element.getBoundingClientRect();
//       bird_props = bird.getBoundingClientRect();

//       if (pipe_sprite_props.right <= 0) {
//         element.remove();
//       } else {
//         if (
//           pipe_sprite_props.right < bird_props.left &&
//           pipe_sprite_props.right + move_speed >= bird_props.left &&
//           element.increase_score == '1'
//         ) {
//           score_val.innerHTML = +score_val.innerHTML + 1;
//           sound_point.play();
//           pauseGame();
//           displayQuestion();
//         }
//         element.style.left = pipe_sprite_props.left - move_speed + 'px';
//       }
//     });
//   }
//   if (!isGamePaused) {
//     requestAnimationFrame(move);
//   }
// }

// function create_pipe() {
//   if (!isGamePaused) {
//     if (pipe_seperation > 215) {
//       pipe_seperation = 0;

//       let pipe_posi = Math.floor(Math.random() * 43) + 8;
//       let pipe_sprite_inv = document.createElement('div');
//       pipe_sprite_inv.className = 'pipe_sprite';
//       pipe_sprite_inv.style.top = pipe_posi - 70 + 'vh';
//       pipe_sprite_inv.style.left = '100vw';

//       document.body.appendChild(pipe_sprite_inv);
//       let pipe_sprite = document.createElement('div');
//       pipe_sprite.className = 'pipe_sprite';
//       pipe_sprite.style.top = pipe_posi + pipe_gap + 'vh';
//       pipe_sprite.style.left = '100vw';
//       pipe_sprite.increase_score = '1';

//       document.body.appendChild(pipe_sprite);
//     }
//     pipe_seperation++;
//     requestAnimationFrame(create_pipe);
//   }
// }

// const jumpAction = () => {
//   img.src = 'images/Bird-2.png'; // Change bird image to indicate jump
//   bird_dy = -7.6; // Apply vertical velocity to make the bird jump

//   // After a short delay, revert the bird image back to original
//   setTimeout(() => {
//     img.src = 'images/Bird.png';
//   }, 200); // Adjust the delay as needed
// };

// document.addEventListener('keydown', (e) => {
//   if ((e.key === 'ArrowUp' || e.key === ' ') && game_state === 'Play') {
//     jumpAction(); // Trigger jump action when spacebar or up arrow key is pressed
//   }
// });


// function apply_gravity() {
//   if (!isGamePaused) {
//     // Add a condition to check if the bird is already near the bottom
//     if (bird_props.bottom >= background.bottom) {
//       // Set the vertical velocity to zero if the bird is near the bottom
//       bird_dy = 0;
//       jumpAction();
//     } else {
//       // Apply gravity only if the bird is not near the bottom
//       bird_dy = Math.min(bird_dy + gravity, terminalVelocity);
//     }

//     // Update the bird's vertical position
//     bird.style.top = bird_props.top + bird_dy + 'px';
//     bird_props = bird.getBoundingClientRect();

//     // Continue applying gravity
//     requestAnimationFrame(apply_gravity);
//   }
// }


// function startGame() {
//   if (game_state !== 'Play') {
//     game_state = 'Play';
//     document.querySelectorAll('.pipe_sprite').forEach((e) => {
//       e.remove();
//     });
//     img.style.display = 'block';
//     bird.style.top = '40vh';
//     message.innerHTML = '';
//     score_title.innerHTML = 'Score : ';
//     score_val.innerHTML = '0';
//     message.classList.remove('messageStyle');
//     play();
//   }
// }




// document.addEventListener('touchstart', () => {
//   startGame(); // Start the game when the screen is touched
// });

// document.addEventListener('touchend', () => {
//   // Optionally, you can handle touchend event if needed
// });

// function startGame() {
//   if (game_state !== 'Play') {
//     game_state = 'Play';
//     document.querySelectorAll('.pipe_sprite').forEach((e) => {
//       e.remove();
//     });
//     img.style.display = 'block'; // Ensure bird image is displayed
//     bird.style.top = '40vh'; // Set initial bird position
//     message.innerHTML = '';
//     score_title.innerHTML = 'Score : ';
//     score_val.innerHTML = '0';
//     message.classList.remove('messageStyle');
//     play();
//   }
// }

// // Function to hide the bird image at the beginning
// function hideBird() {
//   img.style.display = 'none';
// }

// // Call hideBird() initially to hide the bird image
// hideBird();






//with question




// const QuestionList = [
//   { 'Q1': "What is Your Name" },
//   { 'Q2': "What is Your School Name" },
//   { 'Q3': "What is Your father Name" },
//   { 'Q4': "What is Your Mother Name" },
//   { 'Q5': "What is Your Brother Name" },
//   { 'Q6': "Where are you From" },
//   { 'Q7': "What is going on?" },
//   { 'Q8': "Had a Dinner?" },
//   { 'Q9': "why 1+1 is equal to 2?" },
//   {'Q10': "Explain Newtons law of motion?"}
// ];



let QuestionList;
let currentQuestionIndex = 0;
let isGamePaused = false;
let bird_dy = 0;
const terminalVelocity = 5;
let pipe_seperation = 0;
let pipe_gap = 35;
var url = new URL(window.location.href);
var urlParams = new URLSearchParams(window.location.search);
let paramUserID = urlParams.get("Email");
let ParamOrgID = urlParams.get("OrgID");
let M2OstAssesmentID = urlParams.get("M2ostAssessmentId");
let id_game = urlParams.get("idgame");
let gameAssesmentId = urlParams.get("gameassid");
// let currentQuestionIndex = 0;
let UID = [];
const AssementData = [];
let assessmentAnsResponse = [];
var sum = 0;
// let QuestionList;
let assessmentTypeGame;
let point = 0;


async function getIdUser(
  url = `https://www.playtolearn.in/Mini_games/api/UserDetail?OrgId=${ParamOrgID}&Email=${paramUserID}`
  // Asynchronously fetch user ID data from the specified URL
) {
  try {
    const response = await fetch(url, { method: "GET" });
    const encryptedData = await response.json();
    const IdUser = JSON.parse(encryptedData);
    console.log(encryptedData);
    UID.push(IdUser);
    console.log(UID[0].Id_User);
    
    getDetails();
    
    return encryptedData;
  } catch (error) {
    console.error("Fetch error:", error.message);
    throw error;
  }
}



async function getDetails(
  url = `https://www.playtolearn.in/Mini_games/api/GetAssessmentDataList?OrgID=${ParamOrgID}&UID=${UID[0].Id_User}&M2ostAssessmentId=${M2OstAssesmentID}&idgame=${id_game}&gameassid=${gameAssesmentId}`
) {
  try {
    const response = await fetch(url, { method: "GET" });

    const encryptedData = await response.json();
    QuestionList = JSON.parse(encryptedData);
     console.log('ResponseData',QuestionList);

    // Assuming the response is the encrypted data

    // loader.style.display = "none";
    // showPopup();

    return encryptedData;
  } catch (error) {
    console.error("Fetch error:", error.message);
    throw error;
  }
}

function initializePage() {
  try {
    getIdUser();
    console.log(UID[0].Id_User);


  } catch (error) {
    // console.error('Error during initialization:', error.message);
  }
}

document.addEventListener("DOMContentLoaded", initializePage);
let getResponse;

// Function to save assessment data to the server
async function saveAssessment(data) {
  let postData = data;

  const baseUrl = "https://www.playtolearn.in/";
  const endpoint = "Mini_games/api/assessmentdetailuserlog";
  const url = baseUrl + endpoint;

  const response = await fetch(url, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      // Add any additional headers if required
    },
    body: JSON.stringify(postData),
  });

  // if (!response.ok) {
  // throw new Error(`Network response was not ok, status code: ${response.status}`);
  // }
  console.log("response", response);
  const responseData = await response.json();

  return responseData;
}

// Function to save assessment master log data to the server
async function saveAssessmentMasterLog(data) {
  let postData = data;
  //  console.log( JSON.stringify(postData));

  const baseUrl = "https://www.playtolearn.in/";
  const endpoint = "Mini_games/api/gameusermasterlog";
  const url = baseUrl + endpoint;

  const response = await fetch(url, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      // Add any additional headers if required
    },
    body: JSON.stringify(postData),
  });

  // if (!response.ok) {
  // throw new Error(`Network response was not ok, status code: ${response.status}`);

  // }
  // console.log('response',response);
  const responseData = await response.json();

  return responseData;
}



function displayQuestion() {
  if (!isGamePaused && currentQuestionIndex < QuestionList.length) {
    pauseGame();

    let currentQuestion = QuestionList[currentQuestionIndex];
    displayQuestionInModal(QuestionList[currentQuestionIndex]);
    // Your existing code to display questions

    currentQuestionIndex++;
    // backgroundMusic.pause();
  } 
  
}







// function displayQuestion() {
//   if (currentQuestionIndex < QuestionList.length) {
//     const currentQuestion = QuestionList[currentQuestionIndex];
//     displayQuestionInModal(Object.values(currentQuestion)[0]);
//     currentQuestionIndex++;
//   } else {
//     currentQuestionIndex = 0;
//     onGameOver();
//   }
// }



function displayQuestionInModal(questionObj) {
  const question = questionObj.Assessment_Question;
  // console.log("question",question)
  // console.log("questionobj",questionObj)

  const content = questionObj.assessment_question_url;

  const options = questionObj.optionList;
  // console.log("option",options)
  var assessmentType = questionObj.Assessment_Type;
  var contentDiv = $("#contentDiv");

  // Clear existing content in contentDiv
  contentDiv.empty();

  // Depending on the assessment type, add the corresponding content
  if (assessmentType === 1) {
    // Add image
    var imageUrl = questionObj.assessment_question_url;
    var imageElement = $("<img>")
      .attr("src", imageUrl)
      .attr("alt", "Image Alt Text")
      .css({
        width: "100%",
        "max-width": "100%",
        height: "26vh",
        "border-radius": "10px",
      });
    contentDiv.append(imageElement);
  } else if (assessmentType === 2) {
    // Add audio
    var audioUrl = questionObj.assessment_question_url;
    var audioElement = $("<audio controls>").attr("src", audioUrl);
    contentDiv.append(audioElement);
  } else if (assessmentType === 3) {
    // Add video
    var videoUrl = questionObj.assessment_question_url;
    var videoElement = $("<video controls>").attr("src", videoUrl).css({
      width: "100%",
      "max-width": "100%",
      height: "26vh",
    });
    contentDiv.append(videoElement);
  } else {
    // Handle other assessment types or provide a default behavior
    // contentDiv.text('Unsupported assessment type');
  }

  // Display question number and text
  const questionNumber = currentQuestionIndex + 1;

  $("#questionText").html(`${question}`);

  // Clear existing options
  $(".radio-container").empty();

  // Iterate over options and create radio buttons
  options.forEach((option, index) => {
    const optionLabel = $("<label>").text(option.Answer_Description);
    const optionInput = $("<input>").attr({
      type: "radio",
      name: "group",
      value: `${index + 1}`,
    });

    optionLabel.prepend(optionInput);
    $(".radio-container").append(optionLabel);
  });

  $("#continueButton")
    .off("click")
    .on("click", function () {
      const selectedOption = $("input[name=group]:checked").val();

      if (selectedOption) {
        console.log("c", selectedOption);
        $("#questionModal").modal("hide");
        // currentQuestionIndex++;
        // document.getElementById("jet").style.display = "block";

        resumeGame();

        const errorTextElement = $("#error-text");
        errorTextElement.text("");
        const option = questionObj.optionList;
        // console.log(option);
        AssementData.push(questionObj);
        console.log("q", questionObj);

        // console.log(selectedOption);
        // console.log(QuestionList[currentQuestionIndex - 1].optionList[selectedOption-1]);
        if (
          QuestionList[currentQuestionIndex - 1].optionList[selectedOption - 1]
            .Right_Ans == "1"
        ) {
          console.log("correct ans");

          id_question =
            QuestionList[currentQuestionIndex - 1].optionList[
              selectedOption - 1
            ].Id_Assessment_question_ans;
          GivenAns = "1";
          scores = 10;
          // if (currentQuestionIndex === QuestionList.length) {
          //   onGameOver(); // Call onGameOver only after all questions have been answered
          //   document.getElementById("board").style.display ='none';

          // }
        } else {
          console.log("wrong answer");
          // Incorrect answer
          id_question =
            QuestionList[currentQuestionIndex - 1].optionList[
              selectedOption - 1
            ].Id_Assessment_question_ans;
          GivenAns = "2";
          scores = 0;
          // if (currentQuestionIndex === QuestionList.length) {
          //   onGameOver(); // Call onGameOver only after all questions have been answered
          //   document.getElementById("board").style.display ='none';

          // }
        }

        const assessmentAnsResponse = {
          isRightAns: GivenAns,
          AchieveScore: scores,
          id_question: id_question,
        };

        // console.log("assessmentAnsResponse",assessmentAnsResponse)

        // assessmentObject.push(assessmentAnsResponse);
        // console.log("first", assessmentObject);
        if (currentQuestionIndex === QuestionList.length) {
          onGameOver(); // Call onGameOver only after all questions have been answered
          document.getElementById("board").style.display = "none";
        }
      } else {
        const errorTextElement = $("#error-text");
        errorTextElement.text("Click any one option");

        const id_question =
          QuestionList[currentQuestionIndex - 1].optionList[0]
            .Id_Assessment_question_ans; // Assuming the first option represents skipping the question

        const assessmentAnsResponse = {
          isRightAns: "2",
          AchieveScore: sum + 0,
          id_question: null,
        };
        // console.log("assessmentAnsResponse",assessmentAnsResponse)

        // assessmentObject.push(assessmentAnsResponse);

        // console.log("assessmentAnsResponse", assessmentAnsResponse);
      }
    });

  let timer = 6; // Set the timer duration in seconds
  const timerElement = $("#timer");
  timerElement.text(`${timer} sec`);

  const timerInterval = setInterval(() => {
    timer--;

    if (timer >= 0) {
      timerElement.text(`${timer} Sec`);
    } else {
      clearInterval(timerInterval);
      // Time's up, handle it as needed

      onTimeUp();
      if (currentQuestionIndex === QuestionList.length) {
        onGameOver(); // Call onGameOver only after all questions have been answered
        document.getElementById("board").style.display = "none";
      }
    }
  }, 1000);

  // Clear timer when modal is hidden
  $("#questionModal").on("hidden.bs.modal", function () {
    clearInterval(timerInterval);
  });

  // Show the question modal
  $("#questionModal").modal("show");
}


function onTimeUp() {
  isGamePaused = true; // Set player start to true to resume the game

  const id_question =
    QuestionList[currentQuestionIndex - 1].optionList[0]
      .Id_Assessment_question_ans;
  console.log("currentIndex", currentQuestionIndex);
  AssementData.push(QuestionList[currentQuestionIndex - 1]);
  console.log("TimeUpData", AssementData);
  QuestionList[currentQuestionIndex];
  console.log("new_ques", QuestionList[currentQuestionIndex]);

  const assessmentAnsResponse = {
    // isRightAns: GivenAns,
    // AchieveScore: sum + 0,
    // id_question: null,
  };

  // assessmentObject.push(assessmentAnsResponse);
  // console.log("first", assessmentObject);

  // Handle the timeout logic here

  // Automatically select an option (you can modify this based on your logic)
  $("input[name=group]").first().prop("checked", true);

  resumeGame();

  // Hide the question modal
  $("#questionModal").modal("hide");
  // document.getElementById("jet").style.display = "block";
}




// function displayQuestionInModal(question) {
//   pauseGame(); // Pause the game before displaying the question modal
//   $('#questionText').text(question);

//   // Show the modal
//   $('#questionModal').modal('show');
// }

function pauseGame() {
  isGamePaused = true;
  message.classList.add('pausedMessage');
}

function resumeGame() {
  isGamePaused = false;
  document.getElementById("bird-1").style.display ='block';
  $('#questionModal').modal('hide'); // Close the modal

  // Resume the animations and game logic here
  move();
  requestAnimationFrame(apply_gravity);
  requestAnimationFrame(create_pipe);
}

function togglePauseResume() {
  if (isGamePaused) {
    resumeGame();
  } else {
    pauseGame();
  }
}

document.body.addEventListener('click', (e) => {
  if (game_state === 'Play') {
    jumpAction(); // Trigger jump action when body is clicked
  }
});

let move_speed = 3, gravity = 0.5;
let bird = document.querySelector('.bird');
let img = document.getElementById('bird-1');
let sound_point = new Audio('sounds effect/point.mp3');

let bird_props = bird.getBoundingClientRect();
let background = document.querySelector('.background').getBoundingClientRect();
let score_val = document.querySelector('.score_val');
let message = document.querySelector('.message');
let score_title = document.querySelector('.score_title');
let game_state = 'Start';

img.style.display = 'none';
message.classList.add('messageStyle');

document.addEventListener('DOMContentLoaded', function() {
  const startButton = document.getElementById('startButton');
  startButton.addEventListener('click', startGameOnClick);
});

function startGameOnClick() {
  if (game_state !== 'Play') {
    game_state = 'Play';
    document.querySelectorAll('.pipe_sprite').forEach((e) => {
      e.remove();
    });
    img.style.display = 'block';
    bird.style.top = '40vh';
    message.innerHTML = '';
    score_title.innerHTML = 'Score : ';
    score_val.innerHTML = '0';
    message.classList.remove('messageStyle');
    play();
  }
}


function play() {
  requestAnimationFrame(move);
  requestAnimationFrame(apply_gravity);
  requestAnimationFrame(create_pipe);
}

function move() {
  if (!isGamePaused) {
    let pipe_sprite = document.querySelectorAll('.pipe_sprite');
    pipe_sprite.forEach((element) => {
      let pipe_sprite_props = element.getBoundingClientRect();
      bird_props = bird.getBoundingClientRect();

      if (pipe_sprite_props.right <= 0) {
        element.remove();
      } else {
        if (
          pipe_sprite_props.right < bird_props.left &&
          pipe_sprite_props.right + move_speed >= bird_props.left &&
          element.increase_score == '1'
        ) {
          score_val.innerHTML = +score_val.innerHTML + 1;
          sound_point.play();
          displayQuestion();

          pauseGame();
          console.log("madhu")
        }
        element.style.left = pipe_sprite_props.left - move_speed + 'px';
      }
    });
  }
  if (!isGamePaused) {
    requestAnimationFrame(move);
  }
}

function create_pipe() {
  if (!isGamePaused) {
    if (pipe_seperation > 215) {
      pipe_seperation = 0;

      let pipe_posi = Math.floor(Math.random() * 43) + 8;
      let pipe_sprite_inv = document.createElement('div');
      pipe_sprite_inv.className = 'pipe_sprite';
      pipe_sprite_inv.style.top = pipe_posi - 70 + 'vh';
      pipe_sprite_inv.style.left = '100vw';

      document.body.appendChild(pipe_sprite_inv);
      let pipe_sprite = document.createElement('div');
      pipe_sprite.className = 'pipe_sprite';
      pipe_sprite.style.top = pipe_posi + pipe_gap + 'vh';
      pipe_sprite.style.left = '100vw';
      pipe_sprite.increase_score = '1';

      document.body.appendChild(pipe_sprite);
    }
    pipe_seperation++;
    requestAnimationFrame(create_pipe);
  }
}

const jumpAction = () => {
  img.src = 'images/Bird-2.png'; // Change bird image to indicate jump
  bird_dy = -7.6; // Apply vertical velocity to make the bird jump

  // After a short delay, revert the bird image back to original
  setTimeout(() => {
    img.src = 'images/Bird.png';
  }, 200); // Adjust the delay as needed
};

document.addEventListener('keydown', (e) => {
  if ((e.key === 'ArrowUp' || e.key === ' ') && game_state === 'Play') {
    jumpAction(); // Trigger jump action when spacebar or up arrow key is pressed
  }
});


function apply_gravity() {
  if (!isGamePaused) {
    // Add a condition to check if the bird is already near the bottom
    if (bird_props.bottom >= background.bottom) {
      // Set the vertical velocity to zero if the bird is near the bottom
      bird_dy = 100;
      jumpAction();
    } else if (bird_props.top <= background.top) {
      // Limit upward movement by setting the vertical velocity to a positive value
      bird_dy = Math.max(bird_dy, 100);
      
    } else {
      // Apply gravity only if the bird is not near the bottom or top
      bird_dy = Math.min(bird_dy + gravity, terminalVelocity);
    }

    // Update the bird's vertical position
    bird.style.top = bird_props.top + bird_dy + 'px';
    bird_props = bird.getBoundingClientRect();

    // Continue applying gravity
    requestAnimationFrame(apply_gravity);
  }
}



function startGame() {
  if (game_state !== 'Play') {
    game_state = 'Play';
    document.querySelectorAll('.pipe_sprite').forEach((e) => {
      e.remove();
    });
    img.style.display = 'block';
    bird.style.top = '40vh';
    message.innerHTML = '';
    score_title.innerHTML = 'Score : ';
    score_val.innerHTML = '0';
    message.classList.remove('messageStyle');
    play();
  }
}




document.addEventListener('touchstart', () => {
  startGame(); // Start the game when the screen is touched
});

document.addEventListener('touchend', () => {
  // Optionally, you can handle touchend event if needed
});

function startGame() {
  if (game_state !== 'Play') {
    game_state = 'Play';
    document.querySelectorAll('.pipe_sprite').forEach((e) => {
      e.remove();
    });
    img.style.display = 'block'; // Ensure bird image is displayed
    bird.style.top = '40vh'; // Set initial bird position
    message.innerHTML = '';
    score_title.innerHTML = 'Score : ';
    score_val.innerHTML = '0';
    message.classList.remove('messageStyle');
    play();
  }
}

// Function to hide the bird image at the beginning
function hideBird() {
  img.style.display = 'none';
}

// Call hideBird() initially to hide the bird image
hideBird();




//final almost


let QuestionList;
let currentQuestionIndex = 0;
let isGamePaused = false;
let bird_dy = 0;
const terminalVelocity = 5;
let pipe_seperation = 0;
let pipe_gap = 35;
var url = new URL(window.location.href);
var urlParams = new URLSearchParams(window.location.search);
let paramUserID = urlParams.get("Email");
let ParamOrgID = urlParams.get("OrgID");
let M2OstAssesmentID = urlParams.get("M2ostAssessmentId");
let id_game = urlParams.get("idgame");
let gameAssesmentId = urlParams.get("gameassid");
let UID = [];
const AssementData = [];
let assessmentAnsResponse = [];
var sum = 0;
let assessmentTypeGame;
let point = 0;


async function getIdUser(
  url = `https://www.playtolearn.in/Mini_games/api/UserDetail?OrgId=${ParamOrgID}&Email=${paramUserID}`
  // Asynchronously fetch user ID data from the specified URL
) {
  try {
    const response = await fetch(url, { method: "GET" });
    const encryptedData = await response.json();
    const IdUser = JSON.parse(encryptedData);
    console.log(encryptedData);
    UID.push(IdUser);
    console.log(UID[0].Id_User);
    
    getDetails();
    
    return encryptedData;
  } catch (error) {
    console.error("Fetch error:", error.message);
    throw error;
  }
}



async function getDetails(
  url = `https://www.playtolearn.in/Mini_games/api/GetAssessmentDataList?OrgID=${ParamOrgID}&UID=${UID[0].Id_User}&M2ostAssessmentId=${M2OstAssesmentID}&idgame=${id_game}&gameassid=${gameAssesmentId}`
) {
  try {
    const response = await fetch(url, { method: "GET" });

    const encryptedData = await response.json();
    QuestionList = JSON.parse(encryptedData);
     console.log('ResponseData',QuestionList);

    // Assuming the response is the encrypted data

    // loader.style.display = "none";
    // showPopup();

    return encryptedData;
  } catch (error) {
    console.error("Fetch error:", error.message);
    throw error;
  }
}

function initializePage() {
  try {
    getIdUser();
    console.log(UID[0].Id_User);


  } catch (error) {
    // console.error('Error during initialization:', error.message);
  }
}

document.addEventListener("DOMContentLoaded", initializePage);
let getResponse;

// Function to save assessment data to the server
// async function saveAssessment(data) {
//   let postData = data;

//   const baseUrl = "https://www.playtolearn.in/";
//   const endpoint = "Mini_games/api/assessmentdetailuserlog";
//   const url = baseUrl + endpoint;

//   const response = await fetch(url, {
//     method: "POST",
//     headers: {
//       "Content-Type": "application/json",
//       // Add any additional headers if required
//     },
//     body: JSON.stringify(postData),
//   });

//   // if (!response.ok) {
//   // throw new Error(`Network response was not ok, status code: ${response.status}`);
//   // }
//   console.log("response", response);
//   const responseData = await response.json();

//   return responseData;
// }

// Function to save assessment master log data to the server
// async function saveAssessmentMasterLog(data) {
//   let postData = data;
//   //  console.log( JSON.stringify(postData));

//   const baseUrl = "https://www.playtolearn.in/";
//   const endpoint = "Mini_games/api/gameusermasterlog";
//   const url = baseUrl + endpoint;

//   const response = await fetch(url, {
//     method: "POST",
//     headers: {
//       "Content-Type": "application/json",
//       // Add any additional headers if required
//     },
//     body: JSON.stringify(postData),
//   });

//   // if (!response.ok) {
//   // throw new Error(`Network response was not ok, status code: ${response.status}`);

//   // }
//   // console.log('response',response);
//   const responseData = await response.json();

//   return responseData;
// }
function displayQuestion() {
  if (!isGamePaused && currentQuestionIndex < QuestionList.length) {
    pauseGame();

    let currentQuestion = QuestionList[currentQuestionIndex];
    displayQuestionInModal(QuestionList[currentQuestionIndex]);
    // Your existing code to display questions

    currentQuestionIndex++;
    // backgroundMusic.pause();
  } 
  
}


function displayQuestionInModal(questionObj) {
  const question = questionObj.Assessment_Question;
  // console.log("question",question)
  // console.log("questionobj",questionObj)

  const content = questionObj.assessment_question_url;

  const options = questionObj.optionList;
  // console.log("option",options)
  var assessmentType = questionObj.Assessment_Type;
  var contentDiv = $("#contentDiv");

  // Clear existing content in contentDiv
  contentDiv.empty();

  // Depending on the assessment type, add the corresponding content
  if (assessmentType === 1) {
    // Add image
    var imageUrl = questionObj.assessment_question_url;
    var imageElement = $("<img>")
      .attr("src", imageUrl)
      .attr("alt", "Image Alt Text")
      .css({
        width: "100%",
        "max-width": "100%",
        height: "26vh",
        "border-radius": "10px",
      });
    contentDiv.append(imageElement);
  } else if (assessmentType === 2) {
    // Add audio
    var audioUrl = questionObj.assessment_question_url;
    var audioElement = $("<audio controls>").attr("src", audioUrl);
    contentDiv.append(audioElement);
  } else if (assessmentType === 3) {
    // Add video
    var videoUrl = questionObj.assessment_question_url;
    var videoElement = $("<video controls>").attr("src", videoUrl).css({
      width: "100%",
      "max-width": "100%",
      height: "26vh",
    });
    contentDiv.append(videoElement);
  } else {
    // Handle other assessment types or provide a default behavior
    // contentDiv.text('Unsupported assessment type');
  }

  // Display question number and text
  const questionNumber = currentQuestionIndex + 1;

  $("#questionText").html(`${question}`);

  // Clear existing options
  $(".radio-container").empty();

  // Iterate over options and create radio buttons
  options.forEach((option, index) => {
    const optionLabel = $("<label>").text(option.Answer_Description);
    const optionInput = $("<input>").attr({
      type: "radio",
      name: "group",
      value: `${index + 1}`,
    });

    optionLabel.prepend(optionInput);
    $(".radio-container").append(optionLabel);
  });

  $("#continueButton")
    .off("click")
    .on("click", function () {
      const selectedOption = $("input[name=group]:checked").val();

      if (selectedOption) {
        console.log("c", selectedOption);
        $("#questionModal").modal("hide");
        // currentQuestionIndex++;
        // document.getElementById("jet").style.display = "block";

        resumeGame();

        const errorTextElement = $("#error-text");
        errorTextElement.text("");
        const option = questionObj.optionList;
        // console.log(option);
        AssementData.push(questionObj);
        console.log("q", questionObj);

        // console.log(selectedOption);
        // console.log(QuestionList[currentQuestionIndex - 1].optionList[selectedOption-1]);
        if (
          QuestionList[currentQuestionIndex - 1].optionList[selectedOption - 1]
            .Right_Ans == "1"
        ) {
          console.log("correct ans");

          id_question =
            QuestionList[currentQuestionIndex - 1].optionList[
              selectedOption - 1
            ].Id_Assessment_question_ans;
          GivenAns = "1";
          scores = 10;
          // if (currentQuestionIndex === QuestionList.length) {
          //   onGameOver(); // Call onGameOver only after all questions have been answered
          //   document.getElementById("board").style.display ='none';

          // }
        } else {
          console.log("wrong answer");
          // Incorrect answer
          id_question =
            QuestionList[currentQuestionIndex - 1].optionList[
              selectedOption - 1
            ].Id_Assessment_question_ans;
          GivenAns = "2";
          scores = 0;
          // if (currentQuestionIndex === QuestionList.length) {
          //   onGameOver(); // Call onGameOver only after all questions have been answered
          //   document.getElementById("board").style.display ='none';

          // }
        }

        const assessmentAnsResponse = {
          isRightAns: GivenAns,
          AchieveScore: scores,
          id_question: id_question,
        };

        // console.log("assessmentAnsResponse",assessmentAnsResponse)

        // assessmentObject.push(assessmentAnsResponse);
        // console.log("first", assessmentObject);
        if (currentQuestionIndex === QuestionList.length) {
          onGameOver(); // Call onGameOver only after all questions have been answered
          document.getElementById("board").style.display = "none";
        }
      } else {
        const errorTextElement = $("#error-text");
        errorTextElement.text("Click any one option");

        const id_question =
          QuestionList[currentQuestionIndex - 1].optionList[0]
            .Id_Assessment_question_ans; // Assuming the first option represents skipping the question

        const assessmentAnsResponse = {
          isRightAns: "2",
          AchieveScore: sum + 0,
          id_question: null,
        };
        // console.log("assessmentAnsResponse",assessmentAnsResponse)

        // assessmentObject.push(assessmentAnsResponse);

        // console.log("assessmentAnsResponse", assessmentAnsResponse);
      }
    });

  let timer = 600; // Set the timer duration in seconds
  const timerElement = $("#timer");
  timerElement.text(`${timer} sec`);

  const timerInterval = setInterval(() => {
    timer--;

    if (timer >= 0) {
      timerElement.text(`${timer} Sec`);
    } else {
      clearInterval(timerInterval);
      // Time's up, handle it as needed

      onTimeUp();
      if (currentQuestionIndex === QuestionList.length) {
        onGameOver(); // Call onGameOver only after all questions have been answered
        document.getElementById("board").style.display = "none";
      }
    }
  }, 1000);

  // Clear timer when modal is hidden
  $("#questionModal").on("hidden.bs.modal", function () {
    clearInterval(timerInterval);
  });

  // Show the question modal
  $("#questionModal").modal("show");
}


function onTimeUp() {
  isGamePaused = true; // Set player start to true to resume the game

  const id_question =
    QuestionList[currentQuestionIndex - 1].optionList[0]
      .Id_Assessment_question_ans;
  console.log("currentIndex", currentQuestionIndex);
  AssementData.push(QuestionList[currentQuestionIndex - 1]);
  console.log("TimeUpData", AssementData);
  QuestionList[currentQuestionIndex];
  console.log("new_ques", QuestionList[currentQuestionIndex]);

  const assessmentAnsResponse = {
    // isRightAns: GivenAns,
    // AchieveScore: sum + 0,
    // id_question: null,
  };

  // assessmentObject.push(assessmentAnsResponse);
  // console.log("first", assessmentObject);

  // Handle the timeout logic here

  // Automatically select an option (you can modify this based on your logic)
  $("input[name=group]").first().prop("checked", true);

  resumeGame();

  // Hide the question modal
  $("#questionModal").modal("hide");
  // document.getElementById("jet").style.display = "block";
}






function pauseGame() {
  isGamePaused = true;
  message.classList.add('pausedMessage');
}

function resumeGame() {
  isGamePaused = false;
  document.getElementById("bird-1").style.display ='block';
  $('#questionModal').modal('hide'); // Close the modal

  // Resume the animations and game logic here
  move();
  requestAnimationFrame(apply_gravity);
  requestAnimationFrame(create_pipe);
}

function togglePauseResume() {
  if (isGamePaused) {
    resumeGame();
  } else {
    pauseGame();
  }
}

document.body.addEventListener('click', (e) => {
  if (game_state === 'Play') {
    jumpAction(); // Trigger jump action when body is clicked
  }
});

let move_speed = 3, gravity = 0.5;
let bird = document.querySelector('.bird');
let img = document.getElementById('bird-1');
let sound_point = new Audio('sounds effect/point.mp3');

let bird_props = bird.getBoundingClientRect();
let background = document.querySelector('.background').getBoundingClientRect();
let score_val = document.querySelector('.score_val');
let message = document.querySelector('.message');
let score_title = document.querySelector('.score_title');
let game_state = 'Start';

img.style.display = 'none';
message.classList.add('messageStyle');

document.addEventListener('DOMContentLoaded', function() {
  const startButton = document.getElementById('startButton');
  startButton.addEventListener('click', startGameOnClick);
});

function startGameOnClick() {
  document.getElementById("finnyfishlogo").style.display = "none";
  document.getElementById("startButton").style.display = "none";

  if (game_state !== 'Play') {
    game_state = 'Play';
    document.querySelectorAll('.pipe_sprite').forEach((e) => {
      e.remove();
    });
    img.style.display = 'block';
    bird.style.top = '40vh';
    message.innerHTML = '';
    score_title.innerHTML = 'Score : ';
    score_val.innerHTML = '0';
    message.classList.remove('messageStyle');
    play();
  }
}


function play() {
  requestAnimationFrame(move);
  requestAnimationFrame(apply_gravity);
  requestAnimationFrame(create_pipe);
}

// function move() {
//   if (!isGamePaused) {
//     let pipe_sprite = document.querySelectorAll('.pipe_sprite');
//     pipe_sprite.forEach((element) => {
//       let pipe_sprite_props = element.getBoundingClientRect();
//       bird_props = bird.getBoundingClientRect();

//       if (pipe_sprite_props.right <= 0) {
//         element.remove();
//       } else {
//         if (
//           pipe_sprite_props.right < bird_props.left &&
//           pipe_sprite_props.right + move_speed >= bird_props.left &&
//           element.increase_score == '1'
//         ) {
//           score_val.innerHTML = +score_val.innerHTML + 1;
//           sound_point.play();
//           displayQuestion();

//           pauseGame();
//           console.log("madhu")
//         }
//         element.style.left = pipe_sprite_props.left - move_speed + 'px';
//       }
//     });
//   }
//   if (!isGamePaused) {
//     requestAnimationFrame(move);
//   }
// }



// function move() {
//   if (!isGamePaused) {
//     let pipe_sprite = document.querySelectorAll('.pipe_sprite');
//     pipe_sprite.forEach((element) => {
//       let pipe_sprite_props = element.getBoundingClientRect();
//       bird_props = bird.getBoundingClientRect();

//       if (pipe_sprite_props.right <= 0) {
//         element.remove();
//       } else {
//         if (
//           pipe_sprite_props.right < bird_props.left &&
//           pipe_sprite_props.right + move_speed >= bird_props.left &&
//           element.increase_score == '1'
//         ) {
//           score_val.innerHTML = +score_val.innerHTML + 1;
//           sound_point.play();
//           // displayQuestion();
//           // pauseGame(); 
//         }
//         element.style.left = pipe_sprite_props.left - move_speed + 'px';
//       }
//     });

//     // Check if the bird overlaps with any coin
//     let coins = document.querySelectorAll('.coin');
//     coins.forEach((coin) => {
//       let coinRect = coin.getBoundingClientRect();
//       if (
//         bird_props.left <= coinRect.right &&
//         bird_props.right >= coinRect.left &&
//         bird_props.top <= coinRect.bottom &&
//         bird_props.bottom >= coinRect.top
//       ) {
//         console.log("bird",bird_props)
//         console.log("coin",coinRect)
//         coin.remove(); // Remove the coin
//         displayQuestion();
//           pauseGame(); 
//         point+=10;

//         console.log("point",point)
//         // score_val.innerHTML = +score_val.innerHTML + 10; // Increase score by 10 points
//       }
//     });
//   }

//   if (!isGamePaused) {
//     requestAnimationFrame(move);
//   }
// }


function move() {
  if (!isGamePaused) {
    let pipe_sprite = document.querySelectorAll('.pipe_sprite');
    pipe_sprite.forEach((element) => {
      let pipe_sprite_props = element.getBoundingClientRect();
      bird_props = bird.getBoundingClientRect();

      if (pipe_sprite_props.right <= 0) {
        element.remove();
      } else {
        if (
          pipe_sprite_props.right < bird_props.left &&
          pipe_sprite_props.right + move_speed >= bird_props.left &&
          element.increase_score == '1'
        ) {
          score_val.innerHTML = +score_val.innerHTML + 1;
          sound_point.play();
          // displayQuestion();
          // pauseGame(); 
        }
        element.style.left = pipe_sprite_props.left - move_speed + 'px';
      }
    });

    // Check if the bird overlaps with any coin
    let coins = document.querySelectorAll('.coin');
    coins.forEach((coin) => {
      let coinRect = coin.getBoundingClientRect();
      if (
        bird_props.left < coinRect.right &&
        bird_props.right > coinRect.left &&
        bird_props.top < coinRect.bottom &&
        bird_props.bottom > coinRect.top
      ) {
        console.log("bird", bird_props)
        console.log("coin", coinRect)
        displayQuestion();
        coin.remove(); // Remove the coin

        pauseGame();
        point += 10;
        console.log("point", point)
        // score_val.innerHTML = +score_val.innerHTML + 10; // Increase score by 10 points
      }
    });
  }

  if (!isGamePaused) {
    requestAnimationFrame(move);
  }
}




// function create_pipe() {
//   if (!isGamePaused) {
//     if (pipe_seperation > 215) {
//       pipe_seperation = 0;

//       let pipe_posi = Math.floor(Math.random() * 43) + 8;
//       let pipe_sprite_inv = document.createElement('div');
//       pipe_sprite_inv.className = 'pipe_sprite';
//       pipe_sprite_inv.style.top = pipe_posi - 70 + 'vh';
//       pipe_sprite_inv.style.left = '100vw';

//       document.body.appendChild(pipe_sprite_inv);
//       let pipe_sprite = document.createElement('div');
//       pipe_sprite.className = 'pipe_sprite';
//       pipe_sprite.style.top = pipe_posi + pipe_gap + 'vh';
//       pipe_sprite.style.left = '100vw';

//       pipe_sprite.increase_score = '1';

//       // Create a coin between the pipes
//       createCoin(pipe_posi, pipe_gap);
//       createFood(pipe_posi, pipe_gap)

//       document.body.appendChild(pipe_sprite);
//     }
//     pipe_seperation++;
//     requestAnimationFrame(create_pipe);
//   }
// }

// function createCoin(pipe_posi, pipe_gap) {
//   console.log("coin")
//   // Randomly generate the position of the coin between the pipes
//   let coinPos = pipe_posi + (pipe_gap / 2); // Place the coin at the center of the gap
//   // let coinPos = pipe_posi + Math.random() * pipe_gap; // Place the coin randomly within the gap

//   let coin = document.createElement('img');
//   coin.src = 'images/coin.gif'; // Path to your coin image file
//   coin.className = 'coin';
//   coin.style.position = 'fixed'; // Ensure the coin is positioned absolutely

//   coin.style.top = coinPos + 'vh';
//   coin.style.left = '100vw'; // Initially position the coin outside the screen

//   document.body.appendChild(coin);

//   // Move the coin towards the left
//   let moveCoinInterval = setInterval(() => {
//     if (!isGamePaused) {
//       let coinRect = coin.getBoundingClientRect();
//       if (coinRect.left < 0) {
//         clearInterval(moveCoinInterval);
//         coin.remove(); // Remove the coin when it goes out of the screen
//       } else {
//         coin.style.left = coinRect.left - move_speed + 'px';
//       }
//     }
//   }, 16); // Adjust the interval as needed
// }

// function createFood(pipe_posi, pipe_gap) {
//   console.log("food");
//   // Randomly generate the position of the food between the pipes
//   let foodPos = pipe_posi + Math.random() * pipe_gap; // Place the food randomly within the gap

//   let food = document.createElement('img');
//   food.src = 'images/food.png'; // Path to your food image file
//   food.className = 'food';
//   food.style.position = 'fixed'; // Ensure the food is positioned absolutely

//   food.style.top = foodPos + 'vh';
//   food.style.left = '100vw'; // Initially position the food outside the screen

//   document.body.appendChild(food);

//   // Move the food towards the left
//   let moveFoodInterval = setInterval(() => {
//     if (!isGamePaused) {
//       let foodRect = food.getBoundingClientRect();
//       if (foodRect.left < 0) {
//         clearInterval(moveFoodInterval);
//         food.remove(); // Remove the food when it goes out of the screen
//       } else {
//         food.style.left = foodRect.left - move_speed + 'px';
//       }
//     }
//   }, 16); // Adjust the interval as needed
// }





// function create_pipe() {
//   if (!isGamePaused) {
//     if (pipe_seperation > 215) {
//       pipe_seperation = 0;

//       let pipe_posi = Math.floor(Math.random() * 43) + 8;
//       let pipe_sprite_inv = document.createElement('div');
//       pipe_sprite_inv.className = 'pipe_sprite';
//       pipe_sprite_inv.style.top = pipe_posi - 70 + 'vh';
//       pipe_sprite_inv.style.left = '100vw';

//       document.body.appendChild(pipe_sprite_inv);
//       let pipe_sprite = document.createElement('div');
//       pipe_sprite.className = 'pipe_sprite';
//       pipe_sprite.style.top = pipe_posi + pipe_gap + 'vh';
//       pipe_sprite.style.left = '100vw';

//       pipe_sprite.increase_score = '1';

//       // Create a coin between the pipes
//       createCoin(pipe_posi, pipe_gap);
//       // Create a food between the pipes
//       createFood(pipe_posi, pipe_gap);

//       document.body.appendChild(pipe_sprite);
//     }
//     pipe_seperation++;
//     requestAnimationFrame(create_pipe);
//   }
// }


function create_pipe() {
  if (!isGamePaused) {
    if (pipe_seperation > 215) {
      pipe_seperation = 0;

      let pipe_posi = Math.floor(Math.random() * 43) + 8;

      // Create upper pipe
      let upper_pipe_sprite = document.createElement('div');
      upper_pipe_sprite.className = 'pipe_sprite upper-pipe'; // Add class for upper pipe
      upper_pipe_sprite.style.top = pipe_posi - 70 + 'vh'; // Adjust the position of the upper pipe
      upper_pipe_sprite.style.left = '100vw';

      document.body.appendChild(upper_pipe_sprite);

      // Create lower pipe
      let lower_pipe_sprite = document.createElement('div');
      lower_pipe_sprite.className = 'pipe_sprite lower-pipe'; // Add class for lower pipe
      lower_pipe_sprite.style.top = pipe_posi + pipe_gap + 'vh'; // Adjust the position of the lower pipe
      lower_pipe_sprite.style.left = '100vw';

      lower_pipe_sprite.increase_score = '1';

      // Create a coin between the pipes
      createCoin(pipe_posi, pipe_gap);
      // Create a food between the pipes
      createFood(pipe_posi, pipe_gap);

      document.body.appendChild(lower_pipe_sprite);
    }
    pipe_seperation++;
    requestAnimationFrame(create_pipe);
  }
}




function createCoin(pipe_posi, pipe_gap) {
  console.log("coin");
  // Randomly generate the position of the coin between the pipes
  let coinPos = pipe_posi + (pipe_gap / 2); // Place the coin at the center of the gap
  let coin = document.createElement('img');
  coin.src = 'images/coin.gif'; // Path to your coin image file
  coin.className = 'coin';
  coin.style.position = 'fixed'; // Ensure the coin is positioned absolutely

  // Randomize the vertical position of the coin within the gap
  let randomVerticalOffset = Math.random() * pipe_gap * 0.5; // Adjust this multiplier as needed
  coin.style.top = (coinPos - randomVerticalOffset) + 'vh';

  coin.style.left = '100vw'; // Initially position the coin outside the screen

  document.body.appendChild(coin);

  // Move the coin towards the left
  let moveCoinInterval = setInterval(() => {
    if (!isGamePaused) {
      let coinRect = coin.getBoundingClientRect();
      if (coinRect.left < 0) {
        clearInterval(moveCoinInterval);
        coin.remove(); // Remove the coin when it goes out of the screen
      } else {
        coin.style.left = coinRect.left - move_speed + 'px';
      }
    }
  }, 16); // Adjust the interval as needed
}

function createFood(pipe_posi, pipe_gap) {
  console.log("food");
  // Randomly generate the position of the food between the pipes
  let foodPos = pipe_posi + (pipe_gap / 2); // Place the food at the center of the gap
  let food = document.createElement('img');
  food.src = 'images/food.png'; // Path to your food image file
  food.className = 'food';
  food.style.position = 'fixed'; // Ensure the food is positioned absolutely

  // Randomize the vertical position of the food within the gap
  let randomVerticalOffset = Math.random() * pipe_gap * 0.5; // Adjust this multiplier as needed
  food.style.top = (foodPos + randomVerticalOffset) + 'vh';

  food.style.left = '100vw'; // Initially position the food outside the screen

  document.body.appendChild(food);

  // Move the food towards the left
  let moveFoodInterval = setInterval(() => {
    if (!isGamePaused) {
      let foodRect = food.getBoundingClientRect();
      if (foodRect.left < 0) {
        clearInterval(moveFoodInterval);
        food.remove(); // Remove the food when it goes out of the screen
      } else {
        food.style.left = foodRect.left - move_speed + 'px';
      }
    }
  }, 16); // Adjust the interval as needed
}





const jumpAction = () => {
  img.src = 'images/Bird.png'; // Change bird image to indicate jump
  bird_dy = -7.6; // Apply vertical velocity to make the bird jump

  // After a short delay, revert the bird image back to original
  setTimeout(() => {
    img.src = 'images/Bird.png';
  }, 200); // Adjust the delay as needed
};

document.addEventListener('keydown', (e) => {
  if ((e.key === 'ArrowUp' || e.key === ' ') && game_state === 'Play') {
    jumpAction(); // Trigger jump action when spacebar or up arrow key is pressed
  }
});


function apply_gravity() {
  if (!isGamePaused) {
    // Add a condition to check if the bird is already near the bottom
    if (bird_props.bottom >= background.bottom) {
      // Set the vertical velocity to zero if the bird is near the bottom
      bird_dy = 100;
      jumpAction();
    } else if (bird_props.top <= background.top) {
      // Limit upward movement by setting the vertical velocity to a positive value
      bird_dy = Math.max(bird_dy, 100);
      
    } else {
      // Apply gravity only if the bird is not near the bottom or top
      bird_dy = Math.min(bird_dy + gravity, terminalVelocity);
    }

    // Update the bird's vertical position
    bird.style.top = bird_props.top + bird_dy + 'px';
    bird_props = bird.getBoundingClientRect();

    // Continue applying gravity
    requestAnimationFrame(apply_gravity);
  }
}



// function startGame() {
//   if (game_state !== 'Play') {
//     game_state = 'Play';
//     document.querySelectorAll('.pipe_sprite').forEach((e) => {
//       e.remove();
//     });
//     img.style.display = 'block';
//     bird.style.top = '40vh';
//     message.innerHTML = '';
//     score_title.innerHTML = 'Score : ';
//     score_val.innerHTML = '0';
//     message.classList.remove('messageStyle');
//     play();
//   }
// }




// document.addEventListener('touchstart', () => {
//   startGame(); // Start the game when the screen is touched
// });

// document.addEventListener('touchend', () => {
//   // Optionally, you can handle touchend event if needed
// });


// function startGame() {
  
//   if (game_state !== 'Play') {
//     game_state = 'Play';
//     document.querySelectorAll('.pipe_sprite').forEach((e) => {
//       e.remove();
//     });
//     img.style.display = 'block'; // Ensure bird image is displayed
//     bird.style.top = '40vh'; // Set initial bird position
//     message.innerHTML = '';
//     score_title.innerHTML = 'Score : ';
//     score_val.innerHTML = '0';
//     message.classList.remove('messageStyle');
//     play();
//   }
// }

// Event listener for touchstart to start the game
// Event listener for touchend (optional)
document.addEventListener('touchend', () => {
  // Handle touchend event if needed
});

// Function to start the game
function startGame() {
  document.getElementById("finnyfishlogo").style.display = "none";
  document.getElementById("startButton").style.display = "none";
  if (game_state !== 'Play') {
    game_state = 'Play';
    document.querySelectorAll('.pipe_sprite').forEach((e) => {
      e.remove();
    });
    img.style.display = 'block'; // Ensure bird image is displayed
    bird.style.top = '40vh'; // Set initial bird position
    message.innerHTML = '';
    score_title.innerHTML = 'Score : ';
    score_val.innerHTML = '0';
    message.classList.remove('messageStyle');
    play();
  }
}

// Function to start the game when the start button is clicked
function startGameOnClick() {
  startGame(); // Call startGame function to start the game
}

// Add event listener to the start button
document.getElementById("startButton").addEventListener('click', startGameOnClick);


// Function to hide the bird image at the beginning
function hideBird() {
  img.style.display = 'none';
}

// Call hideBird() initially to hide the bird image
hideBird();

const backgroundImg = document.querySelector(".background");


function showPopup() {
  popup.classList.remove("hide");
  backgroundImg.style.filter = "blur(5px)";
  document.getElementById("startButton").style.display = "none";

}

function closePopup() {
  const popup = document.getElementById("popup");
  popup.classList.add("hide");
  backgroundImg.style.filter = "none";
  document.getElementById("startButton").style.display = "block";


}

function showNewPopup() {
  const newPopup = document.getElementById("newPopup");
  newPopup.classList.remove("hide");
  startScreen.style.filter = "blur(5px)";
}

function closeNewPopup() {
  const newPopup = document.getElementById("newPopup");
  newPopup.classList.add("hide");

  // Unblur the start screen
  const startScreen = document.querySelector(".startScreen");
  startScreen.style.filter = "none";
}


window.onload = function () {
  showPopup();
};

document.addEventListener("DOMContentLoaded", function () {
  showPopup();
});




//all set



let QuestionList;
let currentQuestionIndex = 0;
let isGamePaused = false;
let bird_dy = 0;
const terminalVelocity = 5;
let pipe_seperation = 0;
let pipe_gap = 35;
var url = new URL(window.location.href);
var urlParams = new URLSearchParams(window.location.search);
let paramUserID = urlParams.get("Email");
let ParamOrgID = urlParams.get("OrgID");
let M2OstAssesmentID = urlParams.get("M2ostAssessmentId");
let id_game = urlParams.get("idgame");
let gameAssesmentId = urlParams.get("gameassid");
let UID = [];
const AssementData = [];
let assessmentAnsResponse = [];
var sum = 0;
let assessmentTypeGame;
let point = 0;

async function getIdUser(
  url = `https://www.playtolearn.in/Mini_games/api/UserDetail?OrgId=${ParamOrgID}&Email=${paramUserID}`
  // Asynchronously fetch user ID data from the specified URL
) {
  try {
    const response = await fetch(url, { method: "GET" });
    const encryptedData = await response.json();
    const IdUser = JSON.parse(encryptedData);
    console.log(encryptedData);
    UID.push(IdUser);
    console.log(UID[0].Id_User);

    getDetails();

    return encryptedData;
  } catch (error) {
    console.error("Fetch error:", error.message);
    throw error;
  }
}

async function getDetails(
  url = `https://www.playtolearn.in/Mini_games/api/GetAssessmentDataList?OrgID=${ParamOrgID}&UID=${UID[0].Id_User}&M2ostAssessmentId=${M2OstAssesmentID}&idgame=${id_game}&gameassid=${gameAssesmentId}`
) {
  try {
    const response = await fetch(url, { method: "GET" });

    const encryptedData = await response.json();
    QuestionList = JSON.parse(encryptedData);
    console.log("ResponseData", QuestionList);

    // Assuming the response is the encrypted data

    // loader.style.display = "none";
    // showPopup();

    return encryptedData;
  } catch (error) {
    console.error("Fetch error:", error.message);
    throw error;
  }
}

function initializePage() {
  try {
    getIdUser();
    console.log(UID[0].Id_User);
  } catch (error) {
    // console.error('Error during initialization:', error.message);
  }
}

document.addEventListener("DOMContentLoaded", initializePage);
let getResponse;

// Function to save assessment data to the server
// async function saveAssessment(data) {
//   let postData = data;

//   const baseUrl = "https://www.playtolearn.in/";
//   const endpoint = "Mini_games/api/assessmentdetailuserlog";
//   const url = baseUrl + endpoint;

//   const response = await fetch(url, {
//     method: "POST",
//     headers: {
//       "Content-Type": "application/json",
//       // Add any additional headers if required
//     },
//     body: JSON.stringify(postData),
//   });

//   // if (!response.ok) {
//   // throw new Error(`Network response was not ok, status code: ${response.status}`);
//   // }
//   console.log("response", response);
//   const responseData = await response.json();

//   return responseData;
// }

// Function to save assessment master log data to the server
// async function saveAssessmentMasterLog(data) {
//   let postData = data;
//   //  console.log( JSON.stringify(postData));

//   const baseUrl = "https://www.playtolearn.in/";
//   const endpoint = "Mini_games/api/gameusermasterlog";
//   const url = baseUrl + endpoint;

//   const response = await fetch(url, {
//     method: "POST",
//     headers: {
//       "Content-Type": "application/json",
//       // Add any additional headers if required
//     },
//     body: JSON.stringify(postData),
//   });

//   // if (!response.ok) {
//   // throw new Error(`Network response was not ok, status code: ${response.status}`);

//   // }
//   // console.log('response',response);
//   const responseData = await response.json();

//   return responseData;
// }
function displayQuestion() {
  if (!isGamePaused && currentQuestionIndex < QuestionList.length) {
    pauseGame();

    let currentQuestion = QuestionList[currentQuestionIndex];
    displayQuestionInModal(QuestionList[currentQuestionIndex]);
    // Your existing code to display questions

    currentQuestionIndex++;
    // backgroundMusic.pause();
  }
}

function displayQuestionInModal(questionObj) {
  const question = questionObj.Assessment_Question;
  // console.log("question",question)
  // console.log("questionobj",questionObj)

  const content = questionObj.assessment_question_url;

  const options = questionObj.optionList;
  // console.log("option",options)
  var assessmentType = questionObj.Assessment_Type;
  var contentDiv = $("#contentDiv");

  // Clear existing content in contentDiv
  contentDiv.empty();

  // Depending on the assessment type, add the corresponding content
  if (assessmentType === 1) {
    // Add image
    var imageUrl = questionObj.assessment_question_url;
    var imageElement = $("<img>")
      .attr("src", imageUrl)
      .attr("alt", "Image Alt Text")
      .css({
        width: "100%",
        "max-width": "100%",
        height: "26vh",
        "border-radius": "10px",
      });
    contentDiv.append(imageElement);
  } else if (assessmentType === 2) {
    // Add audio
    var audioUrl = questionObj.assessment_question_url;
    var audioElement = $("<audio controls>").attr("src", audioUrl);
    contentDiv.append(audioElement);
  } else if (assessmentType === 3) {
    // Add video
    var videoUrl = questionObj.assessment_question_url;
    var videoElement = $("<video controls>").attr("src", videoUrl).css({
      width: "100%",
      "max-width": "100%",
      height: "26vh",
    });
    contentDiv.append(videoElement);
  } else {
    // Handle other assessment types or provide a default behavior
    // contentDiv.text('Unsupported assessment type');
  }

  // Display question number and text
  const questionNumber = currentQuestionIndex + 1;

  $("#questionText").html(`${question}`);

  // Clear existing options
  $(".radio-container").empty();

  // Iterate over options and create radio buttons
  options.forEach((option, index) => {
    const optionLabel = $("<label>").text(option.Answer_Description);
    const optionInput = $("<input>").attr({
      type: "radio",
      name: "group",
      value: `${index + 1}`,
    });

    optionLabel.prepend(optionInput);
    $(".radio-container").append(optionLabel);
  });

  $("#continueButton")
    .off("click")
    .on("click", function () {
      const selectedOption = $("input[name=group]:checked").val();

      if (selectedOption) {
        console.log("c", selectedOption);
        $("#questionModal").modal("hide");
        // currentQuestionIndex++;
        // document.getElementById("jet").style.display = "block";

        resumeGame();

        const errorTextElement = $("#error-text");
        errorTextElement.text("");
        const option = questionObj.optionList;
        // console.log(option);
        AssementData.push(questionObj);
        console.log("q", questionObj);

        // console.log(selectedOption);
        // console.log(QuestionList[currentQuestionIndex - 1].optionList[selectedOption-1]);
        if (
          QuestionList[currentQuestionIndex - 1].optionList[selectedOption - 1]
            .Right_Ans == "1"
        ) {
          console.log("correct ans");

          id_question =
            QuestionList[currentQuestionIndex - 1].optionList[
              selectedOption - 1
            ].Id_Assessment_question_ans;
          GivenAns = "1";
          scores = 10;
          // if (currentQuestionIndex === QuestionList.length) {
          //   onGameOver(); // Call onGameOver only after all questions have been answered
          //   document.getElementById("board").style.display ='none';

          // }
        } else {
          console.log("wrong answer");
          // Incorrect answer
          id_question =
            QuestionList[currentQuestionIndex - 1].optionList[
              selectedOption - 1
            ].Id_Assessment_question_ans;
          GivenAns = "2";
          scores = 0;
          // if (currentQuestionIndex === QuestionList.length) {
          //   onGameOver(); // Call onGameOver only after all questions have been answered
          //   document.getElementById("board").style.display ='none';

          // }
        }

        const assessmentAnsResponse = {
          isRightAns: GivenAns,
          AchieveScore: scores,
          id_question: id_question,
        };

        // console.log("assessmentAnsResponse",assessmentAnsResponse)

        // assessmentObject.push(assessmentAnsResponse);
        // console.log("first", assessmentObject);
        if (currentQuestionIndex === QuestionList.length) {
          onGameOver(); // Call onGameOver only after all questions have been answered
          document.getElementById("board").style.display = "none";
        }
      } else {
        const errorTextElement = $("#error-text");
        errorTextElement.text("Click any one option");

        const id_question =
          QuestionList[currentQuestionIndex - 1].optionList[0]
            .Id_Assessment_question_ans; // Assuming the first option represents skipping the question

        const assessmentAnsResponse = {
          isRightAns: "2",
          AchieveScore: sum + 0,
          id_question: null,
        };
        // console.log("assessmentAnsResponse",assessmentAnsResponse)

        // assessmentObject.push(assessmentAnsResponse);

        // console.log("assessmentAnsResponse", assessmentAnsResponse);
      }
    });

  let timer = 600; // Set the timer duration in seconds
  const timerElement = $("#timer");
  timerElement.text(`${timer} sec`);

  const timerInterval = setInterval(() => {
    timer--;

    if (timer >= 0) {
      timerElement.text(`${timer} Sec`);
    } else {
      clearInterval(timerInterval);
      // Time's up, handle it as needed

      onTimeUp();
      if (currentQuestionIndex === QuestionList.length) {
        onGameOver(); // Call onGameOver only after all questions have been answered
        document.getElementById("board").style.display = "none";
      }
    }
  }, 1000);

  // Clear timer when modal is hidden
  $("#questionModal").on("hidden.bs.modal", function () {
    clearInterval(timerInterval);
  });

  // Show the question modal
  $("#questionModal").modal("show");
}

function onTimeUp() {
  isGamePaused = true; // Set player start to true to resume the game

  const id_question =
    QuestionList[currentQuestionIndex - 1].optionList[0]
      .Id_Assessment_question_ans;
  console.log("currentIndex", currentQuestionIndex);
  AssementData.push(QuestionList[currentQuestionIndex - 1]);
  console.log("TimeUpData", AssementData);
  QuestionList[currentQuestionIndex];
  console.log("new_ques", QuestionList[currentQuestionIndex]);

  const assessmentAnsResponse = {
    // isRightAns: GivenAns,
    // AchieveScore: sum + 0,
    // id_question: null,
  };

  // assessmentObject.push(assessmentAnsResponse);
  // console.log("first", assessmentObject);

  // Handle the timeout logic here

  // Automatically select an option (you can modify this based on your logic)
  $("input[name=group]").first().prop("checked", true);

  resumeGame();

  // Hide the question modal
  $("#questionModal").modal("hide");
  // document.getElementById("jet").style.display = "block";
}

function pauseGame() {
  isGamePaused = true;
  message.classList.add("pausedMessage");
}

function resumeGame() {
  isGamePaused = false;
  document.getElementById("bird-1").style.display = "block";
  $("#questionModal").modal("hide"); // Close the modal

  // Resume the animations and game logic here
  move();
  requestAnimationFrame(apply_gravity);
  requestAnimationFrame(create_pipe);
}

function togglePauseResume() {
  if (isGamePaused) {
    resumeGame();
  } else {
    pauseGame();
  }
}

document.body.addEventListener("click", (e) => {
  if (game_state === "Play") {
    jumpAction(); // Trigger jump action when body is clicked
  }
});

let move_speed = 3,
  gravity = 0.5;
let bird = document.querySelector(".bird");
let img = document.getElementById("bird-1");
let sound_point = new Audio("sounds effect/point.mp3");
let bonus_point = new Audio("sounds effect/bonus.mp3");


let bird_props = bird.getBoundingClientRect();
let background = document.querySelector(".background").getBoundingClientRect();
let score_val = document.querySelector(".score_val");
let message = document.querySelector(".message");
let score_title = document.querySelector(".score_title");
let game_state = "Start";

img.style.display = "none";
message.classList.add("messageStyle");

document.addEventListener("DOMContentLoaded", function () {
  const startButton = document.getElementById("startButton");
  startButton.addEventListener("click", startGameOnClick);
});

function startGameOnClick() {
  document.getElementById("finnyfishlogo").style.display = "none";
  document.getElementById("startButton").style.display = "none";

  if (game_state !== "Play") {
    game_state = "Play";
    document.querySelectorAll(".pipe_sprite").forEach((e) => {
      e.remove();
    });
    img.style.display = "block";
    bird.style.top = "40vh";
    message.innerHTML = "";
    score_title.innerHTML = "Score : ";
    score_val.innerHTML = "0";
    message.classList.remove("messageStyle");
    play();
  }
}

function play() {
  requestAnimationFrame(move);
  requestAnimationFrame(apply_gravity);
  requestAnimationFrame(create_pipe);
}

// function move() {
//   if (!isGamePaused) {
//     let pipe_sprite = document.querySelectorAll('.pipe_sprite');
//     pipe_sprite.forEach((element) => {
//       let pipe_sprite_props = element.getBoundingClientRect();
//       bird_props = bird.getBoundingClientRect();

//       if (pipe_sprite_props.right <= 0) {
//         element.remove();
//       } else {
//         if (
//           pipe_sprite_props.right < bird_props.left &&
//           pipe_sprite_props.right + move_speed >= bird_props.left &&
//           element.increase_score == '1'
//         ) {
//           score_val.innerHTML = +score_val.innerHTML + 1;
//           sound_point.play();
//           displayQuestion();

//           pauseGame();
//           console.log("madhu")
//         }
//         element.style.left = pipe_sprite_props.left - move_speed + 'px';
//       }
//     });
//   }
//   if (!isGamePaused) {
//     requestAnimationFrame(move);
//   }
// }
const backgroundMusic = document.getElementById("backgroundMusic");

// function move() {
//   if (!isGamePaused) {
//     let pipe_sprite = document.querySelectorAll(".pipe_sprite");
//     pipe_sprite.forEach((element) => {
//       let pipe_sprite_props = element.getBoundingClientRect();
//       bird_props = bird.getBoundingClientRect();

//       if (pipe_sprite_props.right <= 0) {
//         element.remove();
//       } else {
//         if (
//           pipe_sprite_props.right < bird_props.left &&
//           pipe_sprite_props.right + move_speed >= bird_props.left &&
//           element.increase_score == "1"
//         ) {
//           score_val.innerHTML = +score_val.innerHTML + 1;
//           // displayQuestion();
//           // pauseGame();
//         }
//         element.style.left = pipe_sprite_props.left - move_speed + "px";
//       }
//     });

//     // Check if the bird overlaps with any coin
//     let coins = document.querySelectorAll(".coin");
//     coins.forEach((coin) => {
//       let coinRect = coin.getBoundingClientRect();
//       if (
//         bird_props.left + 5 <= coinRect.right &&
//         bird_props.right + 5 >= coinRect.left &&
//         bird_props.top - 5 <= coinRect.bottom &&
//         bird_props.bottom + 5 >= coinRect.top
//       ) {
//         console.log("bird", bird_props);
//         console.log("coin", coinRect);
//         sound_point.play();

//         coin.remove(); // Remove the coin
//         displayQuestion();
//         // alert("madhu")
//         pauseGame();
//         point += 10;

//         console.log("point", point);
//         // score_val.innerHTML = +score_val.innerHTML + 10; // Increase score by 10 points
//       }
//     });
//   }

//   if (!isGamePaused) {
//     requestAnimationFrame(move);
//   }
// }


function move() {
  if (!isGamePaused) {
    let pipe_sprite = document.querySelectorAll(".pipe_sprite");
    pipe_sprite.forEach((element) => {
      let pipe_sprite_props = element.getBoundingClientRect();
      bird_props = bird.getBoundingClientRect();

      if (pipe_sprite_props.right <= 0) {
        element.remove();
      } else {
        if (
          pipe_sprite_props.right < bird_props.left &&
          pipe_sprite_props.right + move_speed >= bird_props.left &&
          element.increase_score == "1"
        ) {
          score_val.innerHTML = +score_val.innerHTML + 1;
          // displayQuestion();
          // pauseGame();
        }
        element.style.left = pipe_sprite_props.left - move_speed + "px";
      }
    });

    // Check if the bird overlaps with any coin
    let coins = document.querySelectorAll(".coin");
    coins.forEach((coin) => {
      let coinRect = coin.getBoundingClientRect();
      if (
        bird_props.left + 5 <= coinRect.right &&
        bird_props.right + 5 >= coinRect.left &&
        bird_props.top - 5 <= coinRect.bottom &&
        bird_props.bottom + 5 >= coinRect.top
      ) {
        console.log("bird", bird_props);
        console.log("coin", coinRect);
        sound_point.play();

        coin.remove(); // Remove the coin
        displayQuestion();
        // alert("madhu")
        pauseGame();
        point += 10;

        console.log("point", point);
        // score_val.innerHTML = +score_val.innerHTML + 10; // Increase score by 10 points
      }
    });

    // Check if the bird overlaps with any food
    let foods = document.querySelectorAll(".food");
    foods.forEach((food) => {
      let foodRect = food.getBoundingClientRect();
      if (
        bird_props.left + 5 <= foodRect.right &&
        bird_props.right + 5 >= foodRect.left &&
        bird_props.top - 5 <= foodRect.bottom &&
        bird_props.bottom + 5 >= foodRect.top
      ) {
        console.log("bird", bird_props);
        console.log("food", foodRect);
        bonus_point.play();

        food.remove(); // Remove the food
        // alert("madhu")
        point += 20;

        console.log("point", point);
      }
    });
  }

  if (!isGamePaused) {
    requestAnimationFrame(move);
  }
}







function create_pipe() {
  if (!isGamePaused) {
    if (pipe_seperation > 215) {
      pipe_seperation = 0;

      let pipe_posi = Math.floor(Math.random() * 43) + 8;

      // Create upper pipe
      let upper_pipe_sprite = document.createElement("div");
      upper_pipe_sprite.className = "pipe_sprite upper-pipe"; // Add class for upper pipe
      upper_pipe_sprite.style.top = pipe_posi - 70 + "vh"; // Adjust the position of the upper pipe
      upper_pipe_sprite.style.left = "100vw";

      document.body.appendChild(upper_pipe_sprite);

      // Create lower pipe
      let lower_pipe_sprite = document.createElement("div");
      lower_pipe_sprite.className = "pipe_sprite lower-pipe"; // Add class for lower pipe
      lower_pipe_sprite.style.top = pipe_posi + pipe_gap + "vh"; // Adjust the position of the lower pipe
      lower_pipe_sprite.style.left = "100vw";

      lower_pipe_sprite.increase_score = "1";

      // Create a coin between the pipes
      createCoin(pipe_posi, pipe_gap);
      // Create a food between the pipes
      createFood(pipe_posi, pipe_gap);

      document.body.appendChild(lower_pipe_sprite);
    }
    pipe_seperation++;
    requestAnimationFrame(create_pipe);
  }
}

function createCoin(pipe_posi, pipe_gap) {
  console.log("coin");
  // Randomly generate the position of the coin between the pipes
  let coinPos = pipe_posi + pipe_gap / 2; // Place the coin at the center of the gap
  let coin = document.createElement("img");
  coin.src = "images/coin.gif"; // Path to your coin image file
  coin.className = "coin";
  coin.style.position = "fixed"; // Ensure the coin is positioned absolutely

  // Randomize the vertical position of the coin within the gap
  let randomVerticalOffset = Math.random() * pipe_gap * 0.5; // Adjust this multiplier as needed
  coin.style.top = coinPos - randomVerticalOffset + "vh";

  coin.style.left = "100vw"; // Initially position the coin outside the screen

  document.body.appendChild(coin);

  // Move the coin towards the left
  let moveCoinInterval = setInterval(() => {
    if (!isGamePaused) {
      let coinRect = coin.getBoundingClientRect();
      if (coinRect.left < 0) {
        clearInterval(moveCoinInterval);
        coin.remove(); // Remove the coin when it goes out of the screen
      } else {
        coin.style.left = coinRect.left - move_speed + "px";
      }
    }
  }, 16); // Adjust the interval as needed
}

function createFood(pipe_posi, pipe_gap) {
  console.log("food");
  // Randomly generate the position of the food between the pipes
  let foodPos = pipe_posi + pipe_gap / 2; // Place the food at the center of the gap
  let food = document.createElement("img");
  food.src = "images/food.png"; // Path to your food image file
  food.className = "food";
  food.style.position = "fixed"; // Ensure the food is positioned absolutely

  // Randomize the vertical position of the food within the gap
  let randomVerticalOffset = Math.random() * pipe_gap * 2; // Adjust this multiplier as needed
  food.style.top = foodPos + randomVerticalOffset + "vh";

  food.style.left = "100vw"; // Initially position the food outside the screen

  document.body.appendChild(food);

  // Move the food towards the left
  let moveFoodInterval = setInterval(() => {
    if (!isGamePaused) {
      let foodRect = food.getBoundingClientRect();
      if (foodRect.left < 0) {
        clearInterval(moveFoodInterval);
        food.remove(); // Remove the food when it goes out of the screen
      } else {
        food.style.left = foodRect.left - move_speed + "px";
      }
    }
  }, 16); // Adjust the interval as needed
}

const jumpAction = () => {
  img.src = "images/Bird.png"; // Change bird image to indicate jump
  bird_dy = -7.6; // Apply vertical velocity to make the bird jump

  // After a short delay, revert the bird image back to original
  setTimeout(() => {
    img.src = "images/Bird.png";
  }, 200); // Adjust the delay as needed
};

document.addEventListener("keydown", (e) => {
  if ((e.key === "ArrowUp" || e.key === " ") && game_state === "Play") {
    jumpAction(); // Trigger jump action when spacebar or up arrow key is pressed
  }
});

function apply_gravity() {
  if (!isGamePaused) {
    // Add a condition to check if the bird is already near the bottom
    if (bird_props.bottom >= background.bottom) {
      // Set the vertical velocity to zero if the bird is near the bottom
      bird_dy = 100;
      jumpAction();
    } else if (bird_props.top <= background.top) {
      // Limit upward movement by setting the vertical velocity to a positive value
      bird_dy = Math.max(bird_dy, 100);
    } else {
      // Apply gravity only if the bird is not near the bottom or top
      bird_dy = Math.min(bird_dy + gravity, terminalVelocity);
    }

    // Update the bird's vertical position
    bird.style.top = bird_props.top + bird_dy + "px";
    bird_props = bird.getBoundingClientRect();

    // Continue applying gravity
    requestAnimationFrame(apply_gravity);
  }
}

// Event listener for touchstart to start the game
// Event listener for touchend (optional)
document.addEventListener("touchend", () => {
  // Handle touchend event if needed
});

// Function to start the game
function startGame() {
  document.getElementById("finnyfishlogo").style.display = "none";
  document.getElementById("startButton").style.display = "none";
  backgroundMusic.play();

  if (game_state !== "Play") {
    game_state = "Play";
    document.querySelectorAll(".pipe_sprite").forEach((e) => {
      e.remove();
    });
    img.style.display = "block"; // Ensure bird image is displayed
    bird.style.top = "40vh"; // Set initial bird position
    message.innerHTML = "";
    score_title.innerHTML = "Score : ";
    score_val.innerHTML = "0";
    message.classList.remove("messageStyle");
    play();
  }
}

// Function to start the game when the start button is clicked
function startGameOnClick() {
  startGame(); // Call startGame function to start the game
}

// Add event listener to the start button
document
  .getElementById("startButton")
  .addEventListener("click", startGameOnClick);

// Function to hide the bird image at the beginning
function hideBird() {
  img.style.display = "none";
}

// Call hideBird() initially to hide the bird image
hideBird();

const backgroundImg = document.querySelector(".background");

function showPopup() {
  popup.classList.remove("hide");
  backgroundImg.style.filter = "blur(5px)";
  document.getElementById("startButton").style.display = "none";
}

function closePopup() {
  const popup = document.getElementById("popup");
  popup.classList.add("hide");
  backgroundImg.style.filter = "none";
  document.getElementById("startButton").style.display = "block";
}

function showNewPopup() {
  const newPopup = document.getElementById("newPopup");
  newPopup.classList.remove("hide");
  startScreen.style.filter = "blur(5px)";
}

function closeNewPopup() {
  const newPopup = document.getElementById("newPopup");
  newPopup.classList.add("hide");

  // Unblur the start screen
  const startScreen = document.querySelector(".startScreen");
  startScreen.style.filter = "none";
}

window.onload = function () {
  showPopup();
};

document.addEventListener("DOMContentLoaded", function () {
  showPopup();
});




osm//




let QuestionList;
let currentQuestionIndex = 0;
let isGamePaused = false;
let bird_dy = 0;
const terminalVelocity = 5;
let pipe_seperation = 0;
let pipe_gap = 35;
var url = new URL(window.location.href);
var urlParams = new URLSearchParams(window.location.search);
let paramUserID = urlParams.get("Email");
let ParamOrgID = urlParams.get("OrgID");
let M2OstAssesmentID = urlParams.get("M2ostAssessmentId");
let id_game = urlParams.get("idgame");
let gameAssesmentId = urlParams.get("gameassid");
let UID = [];
const AssementData = [];
let assessmentAnsResponse = [];
var sum = 0;
// let assessmentTypeGame;
let point = 0;
const backgroundImg = document.querySelector(".background");

// Get a reference to the "startButton" element
var startButton = document.getElementById("startButton");

// Add a click event listener to the "startButton" element
startButton.addEventListener("click", function() {
    // Show the score box and timer container when the start button is clicked
    document.getElementById("score").style.display = "block";
    document.getElementById("timerContainer1").style.display = "block";
});


var timeLeft = 6;
var timerInterval;

// Function to start the timer
function startTimer() {
  // Clear any existing timer interval
  clearInterval(timerInterval);

  // Update timer display immediately
  document.getElementById("customTimer").innerHTML = timeLeft;

  // Start the timer
  timerInterval = setInterval(function() {
    // Decrease time left
    timeLeft--;

    // Update timer display
    document.getElementById("customTimer").innerHTML = timeLeft;
    if (timeLeft <= 0) {
      // Clear timer interval
      clearInterval(timerInterval);
      onGameOver();
    }
  }, 1000);
}

// Function to stop the timer
function stopTimer() {
  clearInterval(timerInterval);
}

// Get a reference to the "startButton" element
var startButton = document.getElementById("startButton");

// Add a click event listener to the "startButton" element
startButton.addEventListener("click", function() {
  // Start the timer when the "startButton" is clicked
  startTimer();
  // Show score box
  document.getElementById("score").style.display = "block";
  // Show timer container
  document.getElementById("timerContainer1").style.display = "block";
});


function updateScoreDisplay() {
  point += 10;
  const scoreElement = document.getElementById("score1");
  scoreElement.innerHTML = `${point} Coins`;
}

// Optional: Log timeLeft for debugging
console.log("timeLeft initially:", timeLeft);


async function getIdUser(
  url = `https://www.playtolearn.in/Mini_games/api/UserDetail?OrgId=${ParamOrgID}&Email=${paramUserID}`
  // Asynchronously fetch user ID data from the specified URL
) {
  try {
    const response = await fetch(url, { method: "GET" });
    const encryptedData = await response.json();
    const IdUser = JSON.parse(encryptedData);
    console.log(encryptedData);
    UID.push(IdUser);
    console.log(UID[0].Id_User);
    getDetails();
    return encryptedData;
  } catch (error) {
    console.error("Fetch error:", error.message);
    throw error;
  }
}

async function getDetails(
  url = `https://www.playtolearn.in/Mini_games/api/GetAssessmentDataList?OrgID=${ParamOrgID}&UID=${UID[0].Id_User}&M2ostAssessmentId=${M2OstAssesmentID}&idgame=${id_game}&gameassid=${gameAssesmentId}`
) {
  try {
    const response = await fetch(url, { method: "GET" });
    const encryptedData = await response.json();
    QuestionList = JSON.parse(encryptedData);
    console.log("ResponseData", QuestionList);
    return encryptedData;
  } catch (error) {
    console.error("Fetch error:", error.message);
    throw error;
  }
}

function initializePage() {
  try {
    getIdUser();
    console.log(UID[0].Id_User);
  } catch (error) {
    // console.error('Error during initialization:', error.message);
  }
}

document.addEventListener("DOMContentLoaded", initializePage);
let getResponse;

// Function to save assessment data to the server
async function saveAssessment(data) {
  let postData = data;

  const baseUrl = "https://www.playtolearn.in/";
  const endpoint = "Mini_games/api/assessmentdetailuserlog";
  const url = baseUrl + endpoint;

  const response = await fetch(url, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      // Add any additional headers if required
    },
    body: JSON.stringify(postData),
  });

  // if (!response.ok) {
  // throw new Error(`Network response was not ok, status code: ${response.status}`);
  // }
  console.log("response", response);
  const responseData = await response.json();

  return responseData;
}

// Function to save assessment master log data to the server
async function saveAssessmentMasterLog(data) {
  let postData = data;
  //  console.log( JSON.stringify(postData));

  const baseUrl = "https://www.playtolearn.in/";
  const endpoint = "Mini_games/api/gameusermasterlog";
  const url = baseUrl + endpoint;

  const response = await fetch(url, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      // Add any additional headers if required
    },
    body: JSON.stringify(postData),
  });

  // if (!response.ok) {
  // throw new Error(`Network response was not ok, status code: ${response.status}`);
  // }
  // console.log('response',response);
  const responseData = await response.json();

  return responseData;
}

let rank = 0;
let scores = 10;
let assessmentObject = [];
let GivenAns;
function onGameOver() {
  // if (assessmentTypeGame) {
    // Handle end of game logic, save assessment data, and show a popup  isGamePaused = true;
    console.log("assesmentData", AssementData);
    const mergedData = AssementData.map((game, index) => ({
      ...game,
      ...assessmentObject[index],
    }));

    console.log("merge", mergedData);
    let assessmentData = [];
    let assementDataForMasterLog = [];

    var sum = 0;
    console.log("sum", sum);

    for (let i = 0; i < mergedData.length; i++) {
      sum = mergedData[i].AchieveScore + sum;

      console.log("s", sum);
      // console.log("a",mergedData[i].AchieveScore )
      console.log("inSum", sum);

      // i=1;mergedData
      let model = {
        ID_ORGANIZATION: urlParams.get("OrgID"),
        id_user: UID[0].Id_User,
        Id_Assessment: mergedData[i].Id_Assessment,
        Id_Game: mergedData[i].Id_Game,
        attempt_no: mergedData[i].allow_attempt,
        id_question: mergedData[i].Id_Assessment_question,
        is_right: mergedData[i].isRightAns,
        score: mergedData[i].AchieveScore,
        Id_Assessment_question_ans: mergedData[i].id_question,
        Time: mergedData[i].Timer,
        M2ostAssessmentId: M2OstAssesmentID,
      };
      console.log("OutSum", sum);
      let modelForGameMasterLog = {
        ID_ORGANIZATION: ParamOrgID,
        id_user: UID[0].Id_User,
        Id_Room: mergedData[0].Id_Assessment,
        Id_Game: mergedData[0].Id_Game,
        attempt_no: mergedData[0].allow_attempt,
        score: sum,
      };

      assessmentData.push(model);
      assementDataForMasterLog.push(modelForGameMasterLog);
    }
    // console.log('AssesmentLog',assementDataForMasterLog);

    saveAssessment(assessmentData);
    saveAssessmentMasterLog(
      assementDataForMasterLog[assementDataForMasterLog.length - 1]
    );
    showNewPopup();
    pauseGame()

    // document.getElementById("board").style.display = "none";
  // } else {
  //   showNewPopup();
  //   // document.getElementById("board").style.display = "none";

  //   // Prepare the data to send in the POST request
  //   async function postData() {
  //     const postGamePlayData = [
  //       {
  //           "ID_ORGANIZATION": ParamOrgID,
  //           "id_user": UID[0].Id_User,
  //           "Id_Assessment": null,
  //           "Id_Game": id_game,
  //           "attempt_no": null,
  //           "id_question": null,
  //           "is_right": null,
  //           "score": point,
  //           "Id_Assessment_question_ans": null,
  //           "Time": 45,
  //           "M2ostAssessmentId": null,
  //           "status": "A"
  //       }
  //     ];
    
  //     try {
  //       // Convert the data to JSON
  //       const postData = JSON.stringify(postGamePlayData);
    
  //       // Make a POST request to the API endpoint
  //       const response = await fetch(`https://www.playtolearn.in/Mini_games_beta/api/GamePlayDetailsUserLog`, {

  //         method: 'POST',
  //         headers: {
  //             'Content-Type': 'application/json',
  //             // Add any additional headers if required
  //         },
  //         body: postData
  //       });
    
  //       if (!response.ok) {
  //         throw new Error('Network response was not ok');
  //       }
    
  //       const data = await response.json();
  //       console.log('Response:', data);
  //     } catch (error) {
  //       console.error('There was a problem with the fetch operation:', error);
  //     }
  //   }
  //   // Call the async function
  //   postData();
  // }
}






function displayQuestion() {

  if (!isGamePaused && currentQuestionIndex < QuestionList.length) {
    updateScoreDisplay()
    console.log("point", point);

    pauseGame();
    let currentQuestion = QuestionList[currentQuestionIndex];
    displayQuestionInModal(QuestionList[currentQuestionIndex]);
    // Your existing code to display questions

    currentQuestionIndex++;
    // backgroundMusic.pause();
  }
}

function displayQuestionInModal(questionObj) {
  const question = questionObj.Assessment_Question;
  // console.log("question",question)
  // console.log("questionobj",questionObj)

  const content = questionObj.assessment_question_url;

  const options = questionObj.optionList;
  // console.log("option",options)
  var assessmentType = questionObj.Assessment_Type;
  var contentDiv = $("#contentDiv");

  // Clear existing content in contentDiv
  contentDiv.empty();

  // Depending on the assessment type, add the corresponding content
  if (assessmentType === 1) {
    // Add image
    var imageUrl = questionObj.assessment_question_url;
    var imageElement = $("<img>")
      .attr("src", imageUrl)
      .attr("alt", "Image Alt Text")
      .css({
        width: "100%",
        "max-width": "100%",
        height: "26vh",
        "border-radius": "10px",
      });
    contentDiv.append(imageElement);
  } else if (assessmentType === 2) {
    // Add audio
    var audioUrl = questionObj.assessment_question_url;
    var audioElement = $("<audio controls>").attr("src", audioUrl);
    contentDiv.append(audioElement);
  } else if (assessmentType === 3) {
    // Add video
    var videoUrl = questionObj.assessment_question_url;
    var videoElement = $("<video controls>").attr("src", videoUrl).css({
      width: "100%",
      "max-width": "100%",
      height: "26vh",
    });
    contentDiv.append(videoElement);
  } else {
    // Handle other assessment types or provide a default behavior
    // contentDiv.text('Unsupported assessment type');
  }

  // Display question number and text
  const questionNumber = currentQuestionIndex + 1;

  $("#questionText").html(`${question}`);

  // Clear existing options
  $(".radio-container").empty();

  // Iterate over options and create radio buttons
  options.forEach((option, index) => {
    const optionLabel = $("<label>").text(option.Answer_Description);
    const optionInput = $("<input>").attr({
      type: "radio",
      name: "group",
      value: `${index + 1}`,
    });

    optionLabel.prepend(optionInput);
    $(".radio-container").append(optionLabel);
  });

  $("#continueButton")
    .off("click")
    .on("click", function () {
      const selectedOption = $("input[name=group]:checked").val();

      if (selectedOption) {
        console.log("c", selectedOption);
        $("#questionModal").modal("hide");
        // currentQuestionIndex++;
        // document.getElementById("jet").style.display = "block";

        resumeGame();

        const errorTextElement = $("#error-text");
        errorTextElement.text("");
        const option = questionObj.optionList;
        // console.log(option);
        AssementData.push(questionObj);
        console.log("q", questionObj);

        // console.log(selectedOption);
        // console.log(QuestionList[currentQuestionIndex - 1].optionList[selectedOption-1]);
        if (
          QuestionList[currentQuestionIndex - 1].optionList[selectedOption - 1]
            .Right_Ans == "1"
        ) {
          console.log("correct ans");

          id_question =
            QuestionList[currentQuestionIndex - 1].optionList[
              selectedOption - 1
            ].Id_Assessment_question_ans;
          GivenAns = "1";
          scores = 10;
          // if (currentQuestionIndex === QuestionList.length) {
          //   onGameOver(); // Call onGameOver only after all questions have been answered
          //   document.getElementById("board").style.display ='none';
          // }
        } else {
          console.log("wrong answer");
          // Incorrect answer
          id_question =
            QuestionList[currentQuestionIndex - 1].optionList[
              selectedOption - 1
            ].Id_Assessment_question_ans;
          GivenAns = "2";
          scores = 0;
          // if (currentQuestionIndex === QuestionList.length) {
          //   onGameOver(); // Call onGameOver only after all questions have been answered
          //   document.getElementById("board").style.display ='none';

          // }
        }

        const assessmentAnsResponse = {
          isRightAns: GivenAns,
          AchieveScore: scores,
          id_question: id_question,
        };

        // console.log("assessmentAnsResponse",assessmentAnsResponse)

        assessmentObject.push(assessmentAnsResponse);
        console.log("first", assessmentObject);
        if (currentQuestionIndex === QuestionList.length) {
          onGameOver(); // Call onGameOver only after all questions have been answered
          // document.getElementById("board").style.display = "none";
        }
      } else {
        const errorTextElement = $("#error-text");
        errorTextElement.text("Click any one option");

        const id_question =
          QuestionList[currentQuestionIndex - 1].optionList[0]
            .Id_Assessment_question_ans; // Assuming the first option represents skipping the question

        const assessmentAnsResponse = {
          isRightAns: "2",
          AchieveScore: sum + 0,
          id_question: null,
        };
        // console.log("assessmentAnsResponse",assessmentAnsResponse)

        assessmentObject.push(assessmentAnsResponse);


        // console.log("assessmentAnsResponse", assessmentAnsResponse);
      }
    });

  let timer = 60; // Set the timer duration in seconds
  const timerElement = $("#timer");
  timerElement.text(`${timer}`);

  const timerInterval = setInterval(() => {
    timer--;

    if (timer >= 0) {
      timerElement.text(`${timer}`);
    } else {
      clearInterval(timerInterval);
      // Time's up, handle it as needed

      onTimeUp();
      if (currentQuestionIndex === QuestionList.length) {
        onGameOver(); // Call onGameOver only after all questions have been answered
        // document.getElementById("board").style.display = "none";
      }
    }
  }, 1000);

  // Clear timer when modal is hidden
  $("#questionModal").on("hidden.bs.modal", function () {
    clearInterval(timerInterval);
  });

  // Show the question modal
  $("#questionModal").modal("show");
}

function onTimeUp() {
  isGamePaused = true; // Set player start to true to resume the game

  const id_question =
    QuestionList[currentQuestionIndex - 1].optionList[0]
      .Id_Assessment_question_ans;
  console.log("currentIndex", currentQuestionIndex);
  AssementData.push(QuestionList[currentQuestionIndex - 1]);
  console.log("TimeUpData", AssementData);
  QuestionList[currentQuestionIndex];
  console.log("new_ques", QuestionList[currentQuestionIndex]);
  const assessmentAnsResponse = {
    isRightAns: GivenAns,
    AchieveScore: sum + 0,
    id_question: null,
  };
  assessmentObject.push(assessmentAnsResponse);
  console.log("first", assessmentObject);

  // Handle the timeout logic here

  // Automatically select an option (you can modify this based on your logic)
  $("input[name=group]").first().prop("checked", true);

  resumeGame();

  // Hide the question modal
  $("#questionModal").modal("hide");
  // document.getElementById("jet").style.display = "block";
}

function pauseGame() {
  isGamePaused = true;
  message.classList.add("pausedMessage");
}

function resumeGame() {
  isGamePaused = false;
  document.getElementById("bird-1").style.display = "block";
  $("#questionModal").modal("hide"); // Close the modal

  // Resume the animations and game logic here
  move();
  requestAnimationFrame(apply_gravity);
  requestAnimationFrame(create_pipe);
}

function togglePauseResume() {
  if (isGamePaused) {
    resumeGame();
  } else {
    pauseGame();
  }
}

document.body.addEventListener("click", (e) => {
  if (game_state === "Play") {
    jumpAction(); // Trigger jump action when body is clicked
  }
});

let move_speed = 3,
  gravity = 0.5;
let bird = document.querySelector(".bird");
let img = document.getElementById("bird-1");
let sound_point = new Audio("sounds effect/point.mp3");
let bonus_point = new Audio("sounds effect/bonus.mp3");


let bird_props = bird.getBoundingClientRect();
let background = document.querySelector(".background").getBoundingClientRect();
let score_val = document.querySelector(".score_val");
let message = document.querySelector(".message");
let score_title = document.querySelector(".score_title");
let game_state = "Start";

img.style.display = "none";
message.classList.add("messageStyle");

document.addEventListener("DOMContentLoaded", function () {
  const startButton = document.getElementById("startButton");
  startButton.addEventListener("click", startGameOnClick);
});

function startGameOnClick() {
  document.getElementById("finnyfishlogo").style.display = "none";
  document.getElementById("startButton").style.display = "none";

  if (game_state !== "Play") {
    game_state = "Play";
    document.querySelectorAll(".pipe_sprite").forEach((e) => {
      e.remove();
    });
    img.style.display = "block";
    bird.style.top = "40vh";
    message.innerHTML = "";
    // score_title.innerHTML = "Score : ";
    // score_val.innerHTML = "0";
    message.classList.remove("messageStyle");
    play();
  }
}
// background.style.display='none'

function play() {
  requestAnimationFrame(move);
  requestAnimationFrame(apply_gravity);
  requestAnimationFrame(create_pipe);
}

const backgroundMusic = document.getElementById("backgroundMusic");

function move() {
  if (!isGamePaused) {
    let pipe_sprite = document.querySelectorAll(".pipe_sprite");
    pipe_sprite.forEach((element) => {
      let pipe_sprite_props = element.getBoundingClientRect();
      bird_props = bird.getBoundingClientRect();

      if (pipe_sprite_props.right <= 0) {
        element.remove();
      } else {
        if (
          pipe_sprite_props.right < bird_props.left &&
          pipe_sprite_props.right + move_speed >= bird_props.left &&
          element.increase_score == "1"
        ) {
          // score_val.innerHTML = +score_val.innerHTML + 1;
          // displayQuestion();
          // pauseGame();
        }
        element.style.left = pipe_sprite_props.left - move_speed + "px";
      }
    });

    // Check if the bird overlaps with any coin
    let coins = document.querySelectorAll(".coin");
    coins.forEach((coin) => {
      let coinRect = coin.getBoundingClientRect();
      if (
        bird_props.left + 5 <= coinRect.right &&
        bird_props.right + 5 >= coinRect.left &&
        bird_props.top - 5 <= coinRect.bottom &&
        bird_props.bottom + 5 >= coinRect.top
      ) {
        console.log("bird", bird_props);
        console.log("coin", coinRect);
        sound_point.play();

        coin.remove(); // Remove the coin
        displayQuestion();

        // alert("madhu")
        // pauseGame();
        // point += 10;

        // score_val.innerHTML = +score_val.innerHTML + 10; // Increase score by 10 points
      }
    });

    // Check if the bird overlaps with any food
    let foods = document.querySelectorAll(".food");
    foods.forEach((food) => {
      let foodRect = food.getBoundingClientRect();
      if (
        bird_props.left + 5 <= foodRect.right &&
        bird_props.right + 5 >= foodRect.left &&
        bird_props.top - 5 <= foodRect.bottom &&
        bird_props.bottom + 5 >= foodRect.top
      ) {
        console.log("bird", bird_props);
        console.log("food", foodRect);
        bonus_point.play();

        food.remove(); // Remove the food
        // alert("madhu")
        point += 10;
        updateScoreDisplay();

        console.log("point", point);
      }
    });
  }

  if (!isGamePaused) {
    requestAnimationFrame(move);
  }
}


function create_pipe() {
  if (!isGamePaused) {
    if (pipe_seperation > 215) {
      pipe_seperation = 0;

      let pipe_posi = Math.floor(Math.random() * 43) + 8;

      // Create upper pipe
      let upper_pipe_sprite = document.createElement("div");
      upper_pipe_sprite.className = "pipe_sprite upper-pipe"; // Add class for upper pipe
      upper_pipe_sprite.style.top = pipe_posi - 70 + "vh"; // Adjust the position of the upper pipe
      upper_pipe_sprite.style.left = "100vw";

      document.body.appendChild(upper_pipe_sprite);

      // Create lower pipe
      let lower_pipe_sprite = document.createElement("div");
      lower_pipe_sprite.className = "pipe_sprite lower-pipe"; // Add class for lower pipe
      lower_pipe_sprite.style.top = pipe_posi + pipe_gap + "vh"; // Adjust the position of the lower pipe
      lower_pipe_sprite.style.left = "100vw";

      lower_pipe_sprite.increase_score = "1";

      // Create a coin between the pipes
      createCoin(pipe_posi, pipe_gap);
      // Create a food between the pipes
      createFood(pipe_posi, pipe_gap);

      document.body.appendChild(lower_pipe_sprite);
    }
    pipe_seperation++;
    requestAnimationFrame(create_pipe);
  }
}

function createCoin(pipe_posi, pipe_gap) {
  console.log("coin");
  // Randomly generate the position of the coin between the pipes
  let coinPos = pipe_posi + pipe_gap / 2; // Place the coin at the center of the gap
  let coin = document.createElement("img");
  coin.src = "images/coin.gif"; // Path to your coin image file
  coin.className = "coin";
  coin.style.position = "fixed"; // Ensure the coin is positioned absolutely

  // Randomize the vertical position of the coin within the gap
  let randomVerticalOffset = Math.random() * pipe_gap * 0.5; // Adjust this multiplier as needed
  coin.style.top = coinPos - randomVerticalOffset + "vh";

  coin.style.left = "100vw"; // Initially position the coin outside the screen

  document.body.appendChild(coin);

  // Move the coin towards the left
  let moveCoinInterval = setInterval(() => {
    if (!isGamePaused) {
      let coinRect = coin.getBoundingClientRect();
      if (coinRect.left < 0) {
        clearInterval(moveCoinInterval);
        coin.remove(); // Remove the coin when it goes out of the screen
      } else {
        coin.style.left = coinRect.left - move_speed + "px";
      }
    }
  }, 16); // Adjust the interval as needed
}

function createFood(pipe_posi, pipe_gap) {
  console.log("food");
  // Randomly generate the position of the food between the pipes
  let foodPos = pipe_posi + pipe_gap / 2; // Place the food at the center of the gap
  let food = document.createElement("img");
  food.src = "images/food.png"; // Path to your food image file
  food.className = "food";
  food.style.position = "fixed"; // Ensure the food is positioned absolutely

  // Randomize the vertical position of the food within the gap
  let randomVerticalOffset = Math.random() * pipe_gap * 2; // Adjust this multiplier as needed
  food.style.top = foodPos + randomVerticalOffset + "vh";

  food.style.left = "100vw"; // Initially position the food outside the screen

  document.body.appendChild(food);

  // Move the food towards the left
  let moveFoodInterval = setInterval(() => {
    if (!isGamePaused) {
      let foodRect = food.getBoundingClientRect();
      if (foodRect.left < 0) {
        clearInterval(moveFoodInterval);
        food.remove(); // Remove the food when it goes out of the screen
      } else {
        food.style.left = foodRect.left - move_speed + "px";
      }
    }
  }, 16); // Adjust the interval as needed
}

const jumpAction = () => {
  img.src = "images/Bird.png"; // Change bird image to indicate jump
  bird_dy = -7.6; // Apply vertical velocity to make the bird jump

  // After a short delay, revert the bird image back to original
  setTimeout(() => {
    img.src = "images/Bird.png";
  }, 200); // Adjust the delay as needed
};

document.addEventListener("keydown", (e) => {
  if ((e.key === "ArrowUp" || e.key === " ") && game_state === "Play") {
    jumpAction(); // Trigger jump action when spacebar or up arrow key is pressed
  }
});

function apply_gravity() {
  if (!isGamePaused) {
    // Add a condition to check if the bird is already near the bottom
    if (bird_props.bottom >= background.bottom) {
      // Set the vertical velocity to zero if the bird is near the bottom
      bird_dy = 100;
      jumpAction();
    } else if (bird_props.top <= background.top) {
      // Limit upward movement by setting the vertical velocity to a positive value
      bird_dy = Math.max(bird_dy, 100);
    } else {
      // Apply gravity only if the bird is not near the bottom or top
      bird_dy = Math.min(bird_dy + gravity, terminalVelocity);
    }

    // Update the bird's vertical position
    bird.style.top = bird_props.top + bird_dy + "px";
    bird_props = bird.getBoundingClientRect();

    // Continue applying gravity
    requestAnimationFrame(apply_gravity);
  }
}
// Event listener for touchend (optional)
document.addEventListener("touchend", () => {
  // Handle touchend event if needed
});

// Function to start the game
function startGame() {
  document.getElementById("finnyfishlogo").style.display = "none";
  document.getElementById("startButton").style.display = "none";
  backgroundMusic.play();

  if (game_state !== "Play") {
    game_state = "Play";
    document.querySelectorAll(".pipe_sprite").forEach((e) => {
      e.remove();
    });
    img.style.display = "block"; // Ensure bird image is displayed
    bird.style.top = "40vh"; // Set initial bird position
    message.innerHTML = "";
    // score_title.innerHTML = "Score : ";
    // score_val.innerHTML = "0";
    message.classList.remove("messageStyle");
    play();
  }
}

// Function to start the game when the start button is clicked
function startGameOnClick() {
  startGame(); // Call startGame function to start the game
}

// Add event listener to the start button
document
  .getElementById("startButton")
  .addEventListener("click", startGameOnClick);

// Function to hide the bird image at the beginning
function hideBird() {
  img.style.display = "none";
}
// Call hideBird() initially to hide the bird image
hideBird();
function showPopup() {
  popup.classList.remove("hide");
  backgroundImg.style.filter = "blur(5px)";
  document.getElementById("startButton").style.display = "none";
}

function closePopup() {
  const popup = document.getElementById("popup");
  popup.classList.add("hide");
  backgroundImg.style.filter = "none";
  document.getElementById("startButton").style.display = "block";
}

function showNewPopup() {
  const newPopup = document.getElementById("newPopup");
  newPopup.classList.remove("hide");
}
function closeNewPopup() {
  const newPopup = document.getElementById("newPopup");
  newPopup.classList.add("hide");
}
window.onload = function () {
  showPopup();
};
document.addEventListener("DOMContentLoaded", function () {
  showPopup();
});
