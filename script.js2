// const jumpAction = () => {
//     img.src = 'images/Bird-2.png';
//     bird_dy = -7.6;
//   };
  
//   const QuestionList = [
//     { 'Q1': "What is Your Name" },
//     { 'Q2': "What is Your School Name" },
//     { 'Q3': "What is Your father Name" },
//     { 'Q4': "What is Your Mother Name" },
//     { 'Q5': "What is Your Brother Name" },
//     { 'Q6': "Where are you From" },
//     { 'Q7': "What is going on?" },
//     { 'Q8': "Had a Dinner?" },
//     { 'Q9': "why 1+1 is equal to 2?" },
//     {'Q10': "Explain Newtons law of motion?"}
//   ];
  
//   let currentQuestionIndex = 0;
//   let isGamePaused = false;
//   let bird_dy = 0;
//     const terminalVelocity = 2;
//     let pipe_seperation = 0;
//     let pipe_gap = 35;
  
  
  
//   function displayQuestion() {
//     if (currentQuestionIndex < QuestionList.length) {
//       const currentQuestion = QuestionList[currentQuestionIndex];
//       displayQuestionInModal(Object.values(currentQuestion)[0]);
//       currentQuestionIndex++;
//     } else {
//       currentQuestionIndex = 0;
//       onGameOver();
//     }
//   }
  
  
  
  
//   function displayQuestionInModal(question) {
//     pauseGame(); // Pause the game before displaying the question modal
//     $('#questionText').text(question);
  
//     // Show the modal
//     $('#questionModal').modal('show');
//   }
  
  
  
  
  
  
//   // Rest of your code...
  
//   function pauseGame() {
//     isGamePaused = true;
//     message.classList.add('pausedMessage');
    
//     // Remove event listeners for vertical movement
//     document.removeEventListener('touchstart', jumpAction);
//     document.removeEventListener('keydown', jumpAction);
//   }
  
//   function resumeGame() {
//     isGamePaused = false;
//     document.getElementById("bird-1").style.display ='block';
//     $('#questionModal').modal('hide'); // Close the modal
    
//     // Re-add event listeners for vertical movement
//     document.addEventListener('touchstart', jumpAction);
//     document.addEventListener('keydown', jumpAction);
    
//     // Resume the animations and game logic here
//     move();
//     requestAnimationFrame(apply_gravity);
//     requestAnimationFrame(create_pipe);
//   }
  
  
  
//   function togglePauseResume() {
//     if (isGamePaused) {
//       resumeGame();
//     } else {
//       pauseGame();
//     }
//   }
  
//   document.addEventListener('keydown', (e) => {
//     if (e.key === ' ' && game_state === 'Play') {
//       togglePauseResume();
//     }
//   });
  
//   document.addEventListener('touchstart', (e) => {
//     if (game_state === 'Play') {
//       togglePauseResume();
//     }
//   });
  
//   document.addEventListener('keydown', (e) => {
//     if (e.key === ' ') { // Spacebar key
//       togglePauseResume();
//     }
//   });
  
//   document.addEventListener('touchstart', (e) => {
//     togglePauseResume();
//   });



// let move_speed = 3, grativy = 0.5;
// let bird = document.querySelector('.bird');
// let img = document.getElementById('bird-1');
// let sound_point = new Audio('sounds effect/point.mp3');
// let sound_die = new Audio('sounds effect/die.mp3');

// // getting bird element properties
// let bird_props = bird.getBoundingClientRect();

// // This method returns DOMReact -> top, right, bottom, left, x, y, width and height
// let background = document.querySelector('.background').getBoundingClientRect();

// let score_val = document.querySelector('.score_val');
// let message = document.querySelector('.message');
// let score_title = document.querySelector('.score_title');

// let game_state = 'Start';
// img.style.display = 'none';
// message.classList.add('messageStyle');

// document.addEventListener('keydown', (e) => {
    
//     if(e.key == 'Enter' && game_state != 'Play'){
//         document.querySelectorAll('.pipe_sprite').forEach((e) => {
//             e.remove();
//         });
//         img.style.display = 'block';
//         bird.style.top = '40vh';
//         game_state = 'Play';
//         message.innerHTML = '';
//         score_title.innerHTML = 'Score : ';
//         score_val.innerHTML = '0';
//         message.classList.remove('messageStyle');
//         play();
//     }
// });


// function move(){
//     if(game_state != 'Play') return;

//     let pipe_sprite = document.querySelectorAll('.pipe_sprite');
//     pipe_sprite.forEach((element) => {
//         let pipe_sprite_props = element.getBoundingClientRect();
//         bird_props = bird.getBoundingClientRect();

//         if(pipe_sprite_props.right <= 0){
//             element.remove();
//         }else{
//             if(bird_props.left < pipe_sprite_props.left + pipe_sprite_props.width && bird_props.left + bird_props.width > pipe_sprite_props.left && bird_props.top < pipe_sprite_props.top + pipe_sprite_props.height && bird_props.top + bird_props.height > pipe_sprite_props.top){
//                 game_state = 'End';
//                 message.innerHTML = 'Game Over'.fontcolor('red') + '<br>Press Enter To Restart';
//                 message.classList.add('messageStyle');
//                 img.style.display = 'none';
//                 sound_die.play();
//                 return;
//             }else{
//                 if(pipe_sprite_props.right < bird_props.left && pipe_sprite_props.right + move_speed >= bird_props.left && element.increase_score == '1'){
//                     score_val.innerHTML =+ score_val.innerHTML + 1;
//                     sound_point.play();
//                 }
//                 element.style.left = pipe_sprite_props.left - move_speed + 'px';
//             }
//         }
//     });
//     requestAnimationFrame(move);
// }


// function apply_gravity() {
//     if (game_state !== 'Play') return;

//     bird_dy = Math.min(bird_dy + grativy, terminalVelocity);

//     // Function to handle jump action (change image and set upward velocity)
//     const jumpAction = () => {
//         img.src = 'images/Bird-2.png';
//         bird_dy = -7.6; // Set the upward velocity when the bird jumps
//     };

//     // Update bird image and velocity when touch start is detected
//     document.addEventListener('touchstart', jumpAction);

//     // Update bird image and velocity when arrow up key is pressed
//     document.addEventListener('keydown', (e) => {
//         if (e.key === 'ArrowUp' || e.key === ' ') {
//             jumpAction();
//         }
//     });

//     // Reset bird image when touch end is detected
//     document.addEventListener('touchend', (e) => {
//         img.src = 'images/Bird.png';
//     });

//     // Reset bird image when arrow up key is released
//     document.addEventListener('keyup', (e) => {
//         if (e.key === 'ArrowUp' || e.key === ' ') {
//             img.src = 'images/Bird.png';
//         }
//     });

//     // Check if the bird is touching the top or bottom of the screen
//     if (bird_props.top <= 0 || bird_props.bottom >= background.bottom) {
//         // Game over condition
//         game_state = 'End';
//         message.style.left = '28vw';
//         window.location.reload();
//         message.classList.remove('messageStyle');
//         return;
//     }

//     // Move the bird vertically based on its velocity
//     bird.style.top = bird_props.top + bird_dy + 'px';
//     bird_props = bird.getBoundingClientRect();

//     // Call apply_gravity function recursively using requestAnimationFrame
//     requestAnimationFrame(apply_gravity);
// }

// function create_pipe(){
//     if(game_state != 'Play') return;

//     if(pipe_seperation > 215){
//         pipe_seperation = 0;

//         let pipe_posi = Math.floor(Math.random() * 43) + 8;
//         let pipe_sprite_inv = document.createElement('div');
//         pipe_sprite_inv.className = 'pipe_sprite';
//         pipe_sprite_inv.style.top = pipe_posi - 70 + 'vh';
//         pipe_sprite_inv.style.left = '100vw';

//         document.body.appendChild(pipe_sprite_inv);
//         let pipe_sprite = document.createElement('div');
//         pipe_sprite.className = 'pipe_sprite';
//         pipe_sprite.style.top = pipe_posi + pipe_gap + 'vh';
//         pipe_sprite.style.left = '100vw';
//         pipe_sprite.increase_score = '1';

//         document.body.appendChild(pipe_sprite);
//     }
//     pipe_seperation++;
//     requestAnimationFrame(create_pipe);
// }




// function play(){
    
//     requestAnimationFrame(move);

//     // let bird_dy = 0;
//     // function apply_gravity(){
//     //     if(game_state != 'Play') return;
//     //     bird_dy = bird_dy + grativy;
//     //     document.addEventListener('keydown', (e) => {
//     //         if(e.key == 'ArrowUp' || e.key == ' '){
//     //             img.src = 'images/Bird-2.png';
//     //             bird_dy = -7.6;
//     //         }
//     //     });

//     //     document.addEventListener('keyup', (e) => {
//     //         if(e.key == 'ArrowUp' || e.key == ' '){
//     //             img.src = 'images/Bird.png';
//     //         }
//     //     });

//     //     if(bird_props.top <= 0 || bird_props.bottom >= background.bottom){
//     //         game_state = 'End';
//     //         message.style.left = '28vw';
//     //         window.location.reload();
//     //         message.classList.remove('messageStyle');
//     //         return;
//     //     }
//     //     bird.style.top = bird_props.top + bird_dy + 'px';
//     //     bird_props = bird.getBoundingClientRect();
//     //     requestAnimationFrame(apply_gravity);
//     // }

//     let bird_dy = 0;
// const terminalVelocity = 2; // Define the maximum downward speed

// // function apply_gravity() {
// //     if (game_state !== 'Play') return;

// //     bird_dy = Math.min(bird_dy + grativy, terminalVelocity);

// //     // Update bird image when touch start is detected
// //     document.addEventListener('touchstart', (e) => {
// //         img.src = 'images/Bird-2.png';
// //         bird_dy = -7.6; // Set the upward velocity when the bird jumps
// //     });

// //     // Update bird image when touch end is detected
// //     document.addEventListener('touchend', (e) => {
// //         img.src = 'images/Bird.png';
// //     });

// //     // Check if the bird is touching the top or bottom of the screen
// //     if (bird_props.top <= 0 || bird_props.bottom >= background.bottom) {
// //         // Game over condition
// //         game_state = 'End';
// //         message.style.left = '28vw';
// //         window.location.reload();
// //         message.classList.remove('messageStyle');
// //         return;
// //     }

// //     // Move the bird vertically based on its velocity
// //     bird.style.top = bird_props.top + bird_dy + 'px';
// //     bird_props = bird.getBoundingClientRect();

// //     // Call apply_gravity function recursively using requestAnimationFrame
// //     requestAnimationFrame(apply_gravity);
// // }

// // let bird_dy = 0;
// // const terminalVelocity = 2; // Define the maximum downward speed

// // function apply_gravity() {
// //     if (game_state !== 'Play') return;

// //     bird_dy = Math.min(bird_dy + grativy, terminalVelocity);

// //     // Update bird image and velocity when touch start is detected or arrow key is pressed
// //     const jumpAction = () => {
// //         img.src = 'images/Bird-2.png';
// //         bird_dy = -7.6; // Set the upward velocity when the bird jumps
// //     };
// //     document.addEventListener('touchstart', jumpAction);
// //     document.addEventListener('keydown', (e) => {
// //         if (e.key === 'ArrowUp' || e.key === ' ') {
            
// //             jumpAction();
// //         }
// //     });

// //     // Update bird image when touch end is detected
// //     document.addEventListener('touchend', (e) => {
// //         img.src = 'images/Bird.png';
// //     });

// //     // Check if the bird is touching the top or bottom of the screen
// //     if (bird_props.top <= 0 || bird_props.bottom >= background.bottom) {
// //         // Game over condition
// //         game_state = 'End';
// //         message.style.left = '28vw';
// //         window.location.reload();
// //         message.classList.remove('messageStyle');
// //         return;
// //     }

// //     // Move the bird vertically based on its velocity
// //     bird.style.top = bird_props.top + bird_dy + 'px';
// //     bird_props = bird.getBoundingClientRect();

// //     // Call apply_gravity function recursively using requestAnimationFrame
// //     requestAnimationFrame(apply_gravity);
// // }







//     requestAnimationFrame(apply_gravity);

//     let pipe_seperation = 0;

//     let pipe_gap = 35;

    
//     requestAnimationFrame(create_pipe);
// }





// // Define bird_dy outside the functions to make it accessible globally
// // 


//  // Define the maximum downward speed

// // Function to start the game
// function startGame() {
//     if (game_state !== 'Play') {
//         // Reset game state and display necessary elements
//         game_state = 'Play';
//         document.querySelectorAll('.pipe_sprite').forEach((e) => {
//             e.remove();
//         });
//         img.style.display = 'block';
//         bird.style.top = '40vh';
//         message.innerHTML = '';
//         score_title.innerHTML = 'Score : ';
//         score_val.innerHTML = '0';
//         message.classList.remove('messageStyle');
//         play(); // Call the play function to start the game
//     }
// }

// // Function to handle touch start event
// function handleTouchStart(e) {
//     startGame(); // Start the game when touched
// }

// // Function to handle touch end event
// function handleTouchEnd(e) {
//     // No action needed for touch end
// }

// // Add touch event listeners for touchstart and touchend
// document.addEventListener('touchstart', handleTouchStart);
// document.addEventListener('touchend', handleTouchEnd);

// // Apply gravity function (unchanged)
// // function apply_gravity() {
// //     if (game_state !== 'Play') return;

// //     bird_dy = Math.min(bird_dy + grativy, terminalVelocity);

// //     document.addEventListener('keydown', (e) => {
// //         if (e.key === 'ArrowUp' || e.key === ' ') {
// //             img.src = 'images/Bird-2.png';
// //             bird_dy = -7.6; // Set the upward velocity when the bird jumps
// //         }
// //     });

// //     document.addEventListener('keyup', (e) => {
// //         if (e.key === 'ArrowUp' || e.key === ' ') {
// //             img.src = 'images/Bird.png';
// //         }
// //     });

// //     if (bird_props.top <= 0 || bird_props.bottom >= background.bottom) {
// //         game_state = 'End';
// //         message.style.left = '28vw';
// //         window.location.reload();
// //         message.classList.remove('messageStyle');
// //         return;
// //     }

// //     bird.style.top = bird_props.top + bird_dy + 'px';
// //     bird_props = bird.getBoundingClientRect();

// //     requestAnimationFrame(apply_gravity);
// // }

// // Function to handle touch start event
// // function handleTouchStart(e) {
// //     if (game_state !== 'Play') {
// //         startGame(); // Start the game if not already playing
// //     } else {
// //         img.src = 'images/Bird-2.png'; // Change bird image
// //         bird_dy = -7.6; // Set upward velocity when touched
// //     }
// // }














// // Update bird image and velocity when touch start is detected
// // document.addEventListener('touchstart', (e) => {
// //   jumpAction();
// // });

// // Update bird image and velocity when arrow up key is pressed
// // document.addEventListener('keydown', (e) => {
// //   if (game_state === 'Play' && (e.key === 'ArrowUp' || e.key === ' ')) {
// //       jumpAction();
// //   }
// // });

// // Reset bird image when touch end is detected
// // document.addEventListener('touchend', (e) => {
// //   img.src = 'images/Bird.png';
// // });

// // Reset bird image when arrow up key is released
// // document.addEventListener('keyup', (e) => {
// //   if (game_state === 'Play' && (e.key === 'ArrowUp' || e.key === ' ')) {
// //       img.src = 'images/Bird.png';
// //   }
// // });


// // function apply_gravity() {
// //   if (!isGamePaused) {
// //       bird_dy = Math.min(bird_dy + gravity, terminalVelocity);

// //       const jumpAction = () => {
// //           img.src = 'images/Bird-2.png';
// //           bird_dy = -7.6;
// //       };

// //       document.addEventListener('touchstart', jumpAction);

// //       document.addEventListener('keydown', (e) => {
// //           if (e.key === 'ArrowUp' || e.key === ' ') {
// //               jumpAction();
// //           }
// //       });

// //       document.addEventListener('touchend', (e) => {
// //           img.src = 'images/Bird.png';
// //       });

// //       document.addEventListener('keyup', (e) => {
// //           if (e.key === 'ArrowUp' || e.key === ' ') {
// //               img.src = 'images/Bird.png';
// //           }
// //       });

// //       if (bird_props.top <= 0 || bird_props.bottom >= background.bottom) {
// //           game_state = 'End';
// //           message.style.left = '28vw';
// //           window.location.reload();
// //           message.classList.remove('messageStyle');
// //           return;
// //       }

// //       bird.style.top = bird_props.top + bird_dy + 'px';
// //       bird_props = bird.getBoundingClientRect();
// //   }
// //   if (!isGamePaused) {
// //       requestAnimationFrame(apply_gravity);
// //   }
// // }



















const QuestionList = [
  { 'Q1': "What is Your Name" },
  { 'Q2': "What is Your School Name" },
  { 'Q3': "What is Your father Name" },
  { 'Q4': "What is Your Mother Name" },
  { 'Q5': "What is Your Brother Name" },
  { 'Q6': "Where are you From" },
  { 'Q7': "What is going on?" },
  { 'Q8': "Had a Dinner?" },
  { 'Q9': "why 1+1 is equal to 2?" },
  {'Q10': "Explain Newtons law of motion?"}
];

let currentQuestionIndex = 0;
let isGamePaused = false;
let bird_dy = 0;
  const terminalVelocity = 2;
  let pipe_seperation = 0;
  let pipe_gap = 35;



function displayQuestion() {
  if (currentQuestionIndex < QuestionList.length) {
    const currentQuestion = QuestionList[currentQuestionIndex];
    displayQuestionInModal(Object.values(currentQuestion)[0]);
    currentQuestionIndex++;
  } else {
    currentQuestionIndex = 0;
    onGameOver();
  }
}




function displayQuestionInModal(question) {
  pauseGame(); // Pause the game before displaying the question modal
  $('#questionText').text(question);

  // Show the modal
  $('#questionModal').modal('show');
}



// Rest of your code...

function pauseGame() {
  isGamePaused = true;
  message.classList.add('pausedMessage');
  
  // Remove event listeners for vertical movement
  document.removeEventListener('touchstart', jumpAction);
  document.removeEventListener('keydown', jumpAction);
}

function resumeGame() {
  isGamePaused = false;
  document.getElementById("bird-1").style.display ='block';
  $('#questionModal').modal('hide'); // Close the modal
  
  // Re-add event listeners for vertical movement
  document.addEventListener('touchstart', jumpAction);
  document.addEventListener('keydown', jumpAction);
  
  // Resume the animations and game logic here
  move();
  requestAnimationFrame(apply_gravity);
  requestAnimationFrame(create_pipe);
}



function togglePauseResume() {
  if (isGamePaused) {
    resumeGame();
  } else {
    pauseGame();
  }
}

document.addEventListener('keydown', (e) => {
  if (e.key === ' ' && game_state === 'Play') {
    togglePauseResume();
  }
});

document.addEventListener('touchstart', (e) => {
  if (game_state === 'Play') {
    togglePauseResume();
  }
});

document.addEventListener('keydown', (e) => {
  if (e.key === ' ') { // Spacebar key
    togglePauseResume();
  }
});

document.addEventListener('touchstart', (e) => {
  togglePauseResume();
});

let move_speed = 3, gravity = 0.5;
let bird = document.querySelector('.bird');
let img = document.getElementById('bird-1');
let sound_point = new Audio('sounds effect/point.mp3');

let bird_props = bird.getBoundingClientRect();
let background = document.querySelector('.background').getBoundingClientRect();
let score_val = document.querySelector('.score_val');
let message = document.querySelector('.message');
let score_title = document.querySelector('.score_title');
let game_state = 'Start';

img.style.display = 'none';
message.classList.add('messageStyle');

document.addEventListener('keydown', (e) => {
    if(e.key == 'Enter' && game_state != 'Play'){
        document.querySelectorAll('.pipe_sprite').forEach((e) => {
            e.remove();
        });
        img.style.display = 'block';
        bird.style.top = '40vh';
        game_state = 'Play';
        message.innerHTML = '';
        score_title.innerHTML = 'Score : ';
        score_val.innerHTML = '0';
        message.classList.remove('messageStyle');
        play();
    }
});






function play() {
  
  requestAnimationFrame(move);

  requestAnimationFrame(apply_gravity);

  requestAnimationFrame(create_pipe);
}


function move() {
  if (!isGamePaused) {
      let pipe_sprite = document.querySelectorAll('.pipe_sprite');
      pipe_sprite.forEach((element) => {
          let pipe_sprite_props = element.getBoundingClientRect();
          bird_props = bird.getBoundingClientRect();

          if (pipe_sprite_props.right <= 0) {
              element.remove();
          } else {
              if (
                  pipe_sprite_props.right < bird_props.left &&
                  pipe_sprite_props.right + move_speed >= bird_props.left &&
                  element.increase_score == '1'
              ) {
                  score_val.innerHTML = +score_val.innerHTML + 1;
                  sound_point.play();
                  pauseGame();
                  displayQuestion();
              }
              element.style.left = pipe_sprite_props.left - move_speed + 'px';
          }
      });
  }
  if (!isGamePaused) {
      requestAnimationFrame(move);
  }
}

function create_pipe() {
  if (!isGamePaused) {
      if (pipe_seperation > 215) {
          pipe_seperation = 0;

          let pipe_posi = Math.floor(Math.random() * 43) + 8;
          let pipe_sprite_inv = document.createElement('div');
          pipe_sprite_inv.className = 'pipe_sprite';
          pipe_sprite_inv.style.top = pipe_posi - 70 + 'vh';
          pipe_sprite_inv.style.left = '100vw';

          document.body.appendChild(pipe_sprite_inv);
          let pipe_sprite = document.createElement('div');
          pipe_sprite.className = 'pipe_sprite';
          pipe_sprite.style.top = pipe_posi + pipe_gap + 'vh';
          pipe_sprite.style.left = '100vw';
          pipe_sprite.increase_score = '1';

          document.body.appendChild(pipe_sprite);
      }
      pipe_seperation++;
      requestAnimationFrame(create_pipe);
  }
}



// Define jumpAction function outside of apply_gravity


// Define jumpAction function outside of apply_gravity
// Define jumpAction function
const jumpAction = () => {
  console.log('Jump action triggered'); // Add a console log for debugging
  img.src = 'images/Bird-2.png'; // Change bird image to indicate jump
  bird_dy = -7.6; // Apply vertical velocity to make the bird jump
};




// Variable to track whether apply_gravity has been called in the current frame
// Variable to track whether gravity has been applied during touch event
let isGravityApplied = false;

// Call apply_gravity directly within the touchstart event listener
// document.addEventListener('touchstart', () => {
//   if (!isGamePaused) {
//     apply_gravity();
//     isGravityApplied = true;
//   }
// });

// // Call apply_gravity during touchmove event to continuously apply gravity
// document.addEventListener('touchmove', () => {
//   if (!isGamePaused && !isGravityApplied) {
//     apply_gravity();
//     isGravityApplied = true;
//   }
// });

// // Reset bird image when touch end is detected
// document.addEventListener('touchend', () => {
//   img.src = 'images/Bird.png';
//   isGravityApplied = false;
// });





// Check if the game state allows for arrow key and touch input
document.addEventListener('keydown', (e) => {
  if ((e.key === 'ArrowUp' || e.key === ' ') && game_state === 'Play') {
    jumpAction();
  }
});



function apply_gravity() {


  console.log('Apply gravity called'); // Add a console log for debugging

  if (!isGamePaused) {
    bird_dy = Math.min(bird_dy + gravity, terminalVelocity);

    // Check if the bird collides with the top or bottom of the screen
    if (bird_props.top <= 0 || bird_props.bottom >= background.bottom) {
      // Game over condition
      game_state = 'End';
      message.style.left = '28vw';
      window.location.reload();
      message.classList.remove('messageStyle');
      return;
    }

    // Move the bird vertically based on its velocity
    bird.style.top = bird_props.top + bird_dy + 'px';
    bird_props = bird.getBoundingClientRect();

    // Call apply_gravity function recursively using requestAnimationFrame
    requestAnimationFrame(apply_gravity);
    console.log('RequestAnimationFrame called'); // Add a console log for debugging

  }
}




function startGame() {
  if (game_state !== 'Play') {
      // Reset game state and display necessary elements
      game_state = 'Play';
      document.querySelectorAll('.pipe_sprite').forEach((e) => {
          e.remove();
      });
      img.style.display = 'block';
      bird.style.top = '40vh';
      message.innerHTML = '';
      score_title.innerHTML = 'Score : ';
      score_val.innerHTML = '0';
      message.classList.remove('messageStyle');
      play(); // Call the play function to start the game
  }
}

// function handleTouchStart(e) {
//   startGame();
// }

// Function to handle touch events
// function handleTouchStart(e) {
//   if (game_state === 'Play') {
//     startGame(); // Start the game
    
//   }
// }

// // Add event listener for touch events
// document.addEventListener('touchstart', handleTouchStart);

// function handleTouchEnd(e) {
// }

// document.addEventListener('touchend', handleTouchEnd);











// Add touch event listeners
// Add touch event listener to trigger jump action
document.addEventListener('touchstart', () => {
  if (game_state === 'Play') {
    jumpAction(); // Trigger jump action when screen is touched
  }
});

document.addEventListener('touchmove', (e) => {
  handleTouchMove(e);
});

document.addEventListener('touchend', (e) => {
  handleTouchEnd(e);
});

// Touch start handler
function handleTouchStart(e) {
  if (game_state === 'Play') {
    startGame(); // Start the game
    e.preventDefault(); // Prevent default touch behavior
  }
}

// Touch move handler (optional)
function handleTouchMove(e) {
  // Handle touch move if needed
}

// Touch end handler (optional)
function handleTouchEnd(e) {
  // Handle touch end if needed
}




// const QuestionList = [
//   { 'Q1': "What is Your Name" },
//   { 'Q2': "What is Your School Name" },
//   { 'Q3': "What is Your father Name" },
//   { 'Q4': "What is Your Mother Name" },
//   { 'Q5': "What is Your Brother Name" },
//   { 'Q6': "Where are you From" },
//   { 'Q7': "What is going on?" },
//   { 'Q8': "Had a Dinner?" },
//   { 'Q9': "why 1+1 is equal to 2?" },
//   {'Q10': "Explain Newtons law of motion?"}
// ];

// let currentQuestionIndex = 0;
// let isGamePaused = false;
// let bird_dy = 0;
//   const terminalVelocity = 2;
//   let pipe_seperation = 0;
//   let pipe_gap = 35;



// function displayQuestion() {
//   if (currentQuestionIndex < QuestionList.length) {
//     const currentQuestion = QuestionList[currentQuestionIndex];
//     displayQuestionInModal(Object.values(currentQuestion)[0]);
//     currentQuestionIndex++;
//   } else {
//     currentQuestionIndex = 0;
//     onGameOver();
//   }
// }




// function displayQuestionInModal(question) {
//   pauseGame(); // Pause the game before displaying the question modal
//   $('#questionText').text(question);

//   // Show the modal
//   $('#questionModal').modal('show');
// }



// // Rest of your code...

// function pauseGame() {
//   isGamePaused = true;
//   message.classList.add('pausedMessage');
  
//   // Remove event listeners for vertical movement
//   document.removeEventListener('touchstart', jumpAction);
//   document.removeEventListener('keydown', jumpAction);
// }

// function resumeGame() {
//   isGamePaused = false;
//   document.getElementById("bird-1").style.display ='block';
//   $('#questionModal').modal('hide'); // Close the modal
  
//   // Re-add event listeners for vertical movement
//   document.addEventListener('touchstart', jumpAction);
//   document.addEventListener('keydown', jumpAction);
  
//   // Resume the animations and game logic here
//   move();
//   requestAnimationFrame(apply_gravity);
//   requestAnimationFrame(create_pipe);
// }



// function togglePauseResume() {
//   if (isGamePaused) {
//     resumeGame();
//   } else {
//     pauseGame();
//   }
// }

// document.addEventListener('keydown', (e) => {
//   if (e.key === ' ' && game_state === 'Play') {
//     togglePauseResume();
//   }
// });

// document.addEventListener('touchstart', (e) => {
//   if (game_state === 'Play') {
//     togglePauseResume();
//   }
// });

// document.addEventListener('keydown', (e) => {
//   if (e.key === ' ') { // Spacebar key
//     togglePauseResume();
//   }
// });

// document.addEventListener('touchstart', (e) => {
//   togglePauseResume();
// });

// let move_speed = 3, gravity = 0.5;
// let bird = document.querySelector('.bird');
// let img = document.getElementById('bird-1');
// let sound_point = new Audio('sounds effect/point.mp3');

// let bird_props = bird.getBoundingClientRect();
// let background = document.querySelector('.background').getBoundingClientRect();
// let score_val = document.querySelector('.score_val');
// let message = document.querySelector('.message');
// let score_title = document.querySelector('.score_title');
// let game_state = 'Start';

// img.style.display = 'none';
// message.classList.add('messageStyle');

// document.addEventListener('keydown', (e) => {
//     if(e.key == 'Enter' && game_state != 'Play'){
//         document.querySelectorAll('.pipe_sprite').forEach((e) => {
//             e.remove();
//         });
//         img.style.display = 'block';
//         bird.style.top = '40vh';
//         game_state = 'Play';
//         message.innerHTML = '';
//         score_title.innerHTML = 'Score : ';
//         score_val.innerHTML = '0';
//         message.classList.remove('messageStyle');
//         play();
//     }
// });






// function play() {
  
//   requestAnimationFrame(move);

//   requestAnimationFrame(apply_gravity);

//   requestAnimationFrame(create_pipe);
// }


// function move() {
//   if (!isGamePaused) {
//       let pipe_sprite = document.querySelectorAll('.pipe_sprite');
//       pipe_sprite.forEach((element) => {
//           let pipe_sprite_props = element.getBoundingClientRect();
//           bird_props = bird.getBoundingClientRect();

//           if (pipe_sprite_props.right <= 0) {
//               element.remove();
//           } else {
//               if (
//                   pipe_sprite_props.right < bird_props.left &&
//                   pipe_sprite_props.right + move_speed >= bird_props.left &&
//                   element.increase_score == '1'
//               ) {
//                   score_val.innerHTML = +score_val.innerHTML + 1;
//                   sound_point.play();
//                   pauseGame();
//                   displayQuestion();
//               }
//               element.style.left = pipe_sprite_props.left - move_speed + 'px';
//           }
//       });
//   }
//   if (!isGamePaused) {
//       requestAnimationFrame(move);
//   }
// }

// function create_pipe() {
//   if (!isGamePaused) {
//       if (pipe_seperation > 215) {
//           pipe_seperation = 0;

//           let pipe_posi = Math.floor(Math.random() * 43) + 8;
//           let pipe_sprite_inv = document.createElement('div');
//           pipe_sprite_inv.className = 'pipe_sprite';
//           pipe_sprite_inv.style.top = pipe_posi - 70 + 'vh';
//           pipe_sprite_inv.style.left = '100vw';

//           document.body.appendChild(pipe_sprite_inv);
//           let pipe_sprite = document.createElement('div');
//           pipe_sprite.className = 'pipe_sprite';
//           pipe_sprite.style.top = pipe_posi + pipe_gap + 'vh';
//           pipe_sprite.style.left = '100vw';
//           pipe_sprite.increase_score = '1';

//           document.body.appendChild(pipe_sprite);
//       }
//       pipe_seperation++;
//       requestAnimationFrame(create_pipe);
//   }
// }




// // Define jumpAction function
// const jumpAction = () => {
//   console.log('Jump action triggered'); // Add a console log for debugging
//   img.src = 'images/Bird-2.png'; // Change bird image to indicate jump
//   bird_dy = -7.6; // Apply vertical velocity to make the bird jump
// };

// // Add touch event listener to trigger jump action
// document.addEventListener('touchstart', (event) => {
//   console.log('Touch detected'); // Add a console log to check if touch is detected
//   if (game_state === 'Play') {
//     jumpAction(); // Trigger jump action when screen is touched
//   }
// });


// // Add event listener for spacebar key
// document.addEventListener('keydown', (e) => {
//   if ((e.key === 'ArrowUp' || e.key === ' ') && game_state === 'Play') {
//     jumpAction(); // Trigger jump action when spacebar or up arrow key is pressed
//   }
// });




// // Check if the game state allows for arrow key and touch input
// // document.addEventListener('keydown', (e) => {
// //   if ((e.key === 'ArrowUp' || e.key === ' ') && game_state === 'Play') {
// //     jumpAction();
// //   }
// // });



// function apply_gravity() {


//   console.log('Apply gravity called'); // Add a console log for debugging

//   if (!isGamePaused) {
//     bird_dy = Math.min(bird_dy + gravity, terminalVelocity);

//     // Check if the bird collides with the top or bottom of the screen
//     if (bird_props.top <= 0 || bird_props.bottom >= background.bottom) {
//       // Game over condition
//       game_state = 'End';
//       message.style.left = '28vw';
//       window.location.reload();
//       message.classList.remove('messageStyle');
//       return;
//     }

//     // Move the bird vertically based on its velocity
//     bird.style.top = bird_props.top + bird_dy + 'px';
//     bird_props = bird.getBoundingClientRect();

//     // Call apply_gravity function recursively using requestAnimationFrame
//     requestAnimationFrame(apply_gravity);
//     console.log('RequestAnimationFrame called'); // Add a console log for debugging

//   }
// }




// function startGame() {
//   if (game_state !== 'Play') {
//       // Reset game state and display necessary elements
//       game_state = 'Play';
//       document.querySelectorAll('.pipe_sprite').forEach((e) => {
//           e.remove();
//       });
//       img.style.display = 'block';
//       bird.style.top = '40vh';
//       message.innerHTML = '';
//       score_title.innerHTML = 'Score : ';
//       score_val.innerHTML = '0';
//       message.classList.remove('messageStyle');
//       play(); // Call the play function to start the game
//   }
// }



// // Add touch event listeners
// // Add touch event listener to trigger jump action
// // document.addEventListener('touchstart', () => {
// //   if (game_state === 'Play') {
// //     jumpAction(); // Trigger jump action when screen is touched
// //   }
// // });

// // document.addEventListener('touchmove', (e) => {
// //   handleTouchMove(e);
// // });

// // document.addEventListener('touchend', (e) => {
// //   handleTouchEnd(e);
// // });

// // // Touch start handler
// // function handleTouchStart(e) {
// //   if (game_state === 'Play') {
// //     startGame(); // Start the game
// //     e.preventDefault(); // Prevent default touch behavior
// //   }
// // }

// // // Touch move handler (optional)
// // function handleTouchMove(e) {
// //   // Handle touch move if needed
// // }

// // // Touch end handler (optional)
// // function handleTouchEnd(e) {
// //   // Handle touch end if needed
// // }








// // Remove duplicate event listeners
// document.addEventListener('keydown', (e) => {
//   if (e.key === ' ') { // Spacebar key
//     togglePauseResume();
//   }
// });

// // Add touch event listeners
// document.addEventListener('touchstart', (e) => {
//   if (game_state === 'Play') {
//     togglePauseResume(); // Toggle pause/resume on touchstart
//   }
// });

// // Define touch event handlers
// function handleTouchStart(e) {
//   if (game_state === 'Play') {
//     togglePauseResume(); // Toggle pause/resume on touchstart
//     e.preventDefault(); // Prevent default touch behavior
//   }
// }

// // Attach touch event handler to document
// document.addEventListener('touchstart', handleTouchStart);

// // Optional touch move handler (if needed)
// document.addEventListener('touchmove', (e) => {
//   // Handle touch move if needed
// });

// // Optional touch end handler (if needed)
// document.addEventListener('touchend', (e) => {
//   // Handle touch end if needed
// });


// // Remove duplicate event listeners for spacebar key
// document.addEventListener('keydown', (e) => {
//   if (e.key === ' ') { // Spacebar key
//     togglePauseResume();
//   }
// });

// // Add click event listener to the body
// document.body.addEventListener('click', (e) => {
//   if (game_state === 'Play') {
//     jumpAction(); // Trigger jump action when body is clicked
//   }
// });

// // Define jumpAction function to make the bird fly
// // const jumpAction = () => {
// //   console.log('Jump action triggered'); // Add a console log for debugging
// //   img.src = 'images/Bird-2.png'; // Change bird image to indicate jump
// //   bird_dy = -7.6; // Apply vertical velocity to make the bird jump
// // };

// // Attach click event handler to the body
// document.body.addEventListener('click', (e) => {
//   if (game_state === 'Play') {
//     jumpAction(); // Trigger jump action when body is clicked
//   }
// });




// final code




// const QuestionList = [
//   { 'Q1': "What is Your Name" },
//   { 'Q2': "What is Your School Name" },
//   { 'Q3': "What is Your father Name" },
//   { 'Q4': "What is Your Mother Name" },
//   { 'Q5': "What is Your Brother Name" },
//   { 'Q6': "Where are you From" },
//   { 'Q7': "What is going on?" },
//   { 'Q8': "Had a Dinner?" },
//   { 'Q9': "why 1+1 is equal to 2?" },
//   {'Q10': "Explain Newtons law of motion?"}
// ];

// let currentQuestionIndex = 0;
// let isGamePaused = false;
// let bird_dy = 0;
// const terminalVelocity = 2;
// let pipe_seperation = 0;
// let pipe_gap = 35;

// function displayQuestion() {
//   if (currentQuestionIndex < QuestionList.length) {
//     const currentQuestion = QuestionList[currentQuestionIndex];
//     displayQuestionInModal(Object.values(currentQuestion)[0]);
//     currentQuestionIndex++;
//   } else {
//     currentQuestionIndex = 0;
//     onGameOver();
//   }
// }

// function displayQuestionInModal(question) {
//   pauseGame(); // Pause the game before displaying the question modal
//   $('#questionText').text(question);

//   // Show the modal
//   $('#questionModal').modal('show');
// }

// function pauseGame() {
//   isGamePaused = true;
//   message.classList.add('pausedMessage');
// }

// function resumeGame() {
//   isGamePaused = false;
//   document.getElementById("bird-1").style.display ='block';
//   $('#questionModal').modal('hide'); // Close the modal

//   // Resume the animations and game logic here
//   move();
//   requestAnimationFrame(apply_gravity);
//   requestAnimationFrame(create_pipe);
// }

// function togglePauseResume() {
//   if (isGamePaused) {
//     resumeGame();
//   } else {
//     pauseGame();
//   }
// }

// document.body.addEventListener('click', (e) => {
//   if (game_state === 'Play') {
//     jumpAction(); // Trigger jump action when body is clicked
//   }
// });

// let move_speed = 3, gravity = 0.5;
// let bird = document.querySelector('.bird');
// let img = document.getElementById('bird-1');
// let sound_point = new Audio('sounds effect/point.mp3');

// let bird_props = bird.getBoundingClientRect();
// let background = document.querySelector('.background').getBoundingClientRect();
// let score_val = document.querySelector('.score_val');
// let message = document.querySelector('.message');
// let score_title = document.querySelector('.score_title');
// let game_state = 'Start';

// img.style.display = 'none';
// message.classList.add('messageStyle');

// document.addEventListener('keydown', (e) => {
//   if(e.key == 'Enter' && game_state != 'Play'){
//     document.querySelectorAll('.pipe_sprite').forEach((e) => {
//       e.remove();
//     });
//     img.style.display = 'block';
//     bird.style.top = '40vh';
//     game_state = 'Play';
//     message.innerHTML = '';
//     score_title.innerHTML = 'Score : ';
//     score_val.innerHTML = '0';
//     message.classList.remove('messageStyle');
//     play();
//   }
// });

// function play() {
//   requestAnimationFrame(move);
//   requestAnimationFrame(apply_gravity);
//   requestAnimationFrame(create_pipe);
// }

// function move() {
//   if (!isGamePaused) {
//     let pipe_sprite = document.querySelectorAll('.pipe_sprite');
//     pipe_sprite.forEach((element) => {
//       let pipe_sprite_props = element.getBoundingClientRect();
//       bird_props = bird.getBoundingClientRect();

//       if (pipe_sprite_props.right <= 0) {
//         element.remove();
//       } else {
//         if (
//           pipe_sprite_props.right < bird_props.left &&
//           pipe_sprite_props.right + move_speed >= bird_props.left &&
//           element.increase_score == '1'
//         ) {
//           score_val.innerHTML = +score_val.innerHTML + 1;
//           sound_point.play();
//           pauseGame();
//           displayQuestion();
//         }
//         element.style.left = pipe_sprite_props.left - move_speed + 'px';
//       }
//     });
//   }
//   if (!isGamePaused) {
//     requestAnimationFrame(move);
//   }
// }

// function create_pipe() {
//   if (!isGamePaused) {
//     if (pipe_seperation > 215) {
//       pipe_seperation = 0;

//       let pipe_posi = Math.floor(Math.random() * 43) + 8;
//       let pipe_sprite_inv = document.createElement('div');
//       pipe_sprite_inv.className = 'pipe_sprite';
//       pipe_sprite_inv.style.top = pipe_posi - 70 + 'vh';
//       pipe_sprite_inv.style.left = '100vw';

//       document.body.appendChild(pipe_sprite_inv);
//       let pipe_sprite = document.createElement('div');
//       pipe_sprite.className = 'pipe_sprite';
//       pipe_sprite.style.top = pipe_posi + pipe_gap + 'vh';
//       pipe_sprite.style.left = '100vw';
//       pipe_sprite.increase_score = '1';

//       document.body.appendChild(pipe_sprite);
//     }
//     pipe_seperation++;
//     requestAnimationFrame(create_pipe);
//   }
// }

// const jumpAction = () => {
//   img.src = 'images/Bird-2.png'; // Change bird image to indicate jump
//   bird_dy = -7.6; // Apply vertical velocity to make the bird jump

//   // After a short delay, revert the bird image back to original
//   setTimeout(() => {
//     img.src = 'images/Bird.png';
//   }, 200); // Adjust the delay as needed
// };

// document.addEventListener('keydown', (e) => {
//   if ((e.key === 'ArrowUp' || e.key === ' ') && game_state === 'Play') {
//     jumpAction(); // Trigger jump action when spacebar or up arrow key is pressed
//   }
// });

// function apply_gravity() {
//   if (!isGamePaused) {
//     bird_dy = Math.min(bird_dy + gravity, terminalVelocity);

//     if (bird_props.top <= 0 || bird_props.bottom >= background.bottom) {
//       game_state = 'End';
//       message.style.left = '28vw';
//       window.location.reload();
//       message.classList.remove('messageStyle');
//       return;
//     }

//     bird.style.top = bird_props.top + bird_dy + 'px';
//     bird_props = bird.getBoundingClientRect();

//     requestAnimationFrame(apply_gravity);
//   }
// }

// function startGame() {
//   if (game_state !== 'Play') {
//     game_state = 'Play';
//     document.querySelectorAll('.pipe_sprite').forEach((e) => {
//       e.remove();
//     });
//     img.style.display = 'block';
//     bird.style.top = '40vh';
//     message.innerHTML = '';
//     score_title.innerHTML = 'Score : ';
//     score_val.innerHTML = '0';
//     message.classList.remove('messageStyle');
//     play();
//   }
// }




// document.addEventListener('touchstart', () => {
//   startGame(); // Start the game when the screen is touched
// });

// document.addEventListener('touchend', () => {
//   // Optionally, you can handle touchend event if needed
// });

// function startGame() {
//   if (game_state !== 'Play') {
//     game_state = 'Play';
//     document.querySelectorAll('.pipe_sprite').forEach((e) => {
//       e.remove();
//     });
//     img.style.display = 'block'; // Ensure bird image is displayed
//     bird.style.top = '40vh'; // Set initial bird position
//     message.innerHTML = '';
//     score_title.innerHTML = 'Score : ';
//     score_val.innerHTML = '0';
//     message.classList.remove('messageStyle');
//     play();
//   }
// }

// // Function to hide the bird image at the beginning
// function hideBird() {
//   img.style.display = 'none';
// }

// // Call hideBird() initially to hide the bird image
// hideBird();
